{"version":3,"mappings":"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","names":["DefaultPageResolverService","ledgerService","JSON","parse","localStorage","getItem","currentUser","masterLedgerTrueFalse","id","pipe","res","data","result","_angular_core__WEBPACK_IMPORTED_MODULE_3__","factory","providedIn","_angular_core__WEBPACK_IMPORTED_MODULE_4__","CreateLedgerComponent","dialog","toastService","titleCasePipe","getAllGlnames","then","setLedgerData","sideTreeData","entries","map","categories","push","entry","children","length","filterEntriesWithChildren","isLoading","success","rawData","console","log","sideTree","openErrorSnackBar","category","child","childData","flattenCategory","setTimeout","existingCategory","find","c","glNumber","flattenedData","updateSelectedItemsAndSelectAll","filteredChildren","filter","hasEmptyGrandchildren","nextLevelChildren","filterChildrenWithEmptyGrandchildren","some","grandchild","allSelected","every","item","selected","someSelected","selectAllChecked","selectedItems","glName","displayCategory","index","indexOf","splice","updateSelectAllCheckedState","dialogRef","open","_preview_preview_component__WEBPACK_IMPORTED_MODULE_0__","width","height","allGlData","panelClass","disableClose","position","right","afterClosed","subscribe","_my_ledger_add_ledger_add_ledger_component__WEBPACK_IMPORTED_MODULE_1__","createLedger","searchTerm","toLowerCase","trim","includes","selectors","decls","vars","consts","template","ctx","child_r16","CustomizeLedgerComponent","router","cdr","ngZone","renderer","forEach","gl_flag","markForCheck","selectRootElement","myButton","nativeElement","click","err","run","error","_my_ledger_add_ledger_add_ledger_component__WEBPACK_IMPORTED_MODULE_0__","viewQuery","routes","path","component","_ledger_ledger_component__WEBPACK_IMPORTED_MODULE_0__","resolve","defaultPage","src_app_core_services_default_page_resolver_service__WEBPACK_IMPORTED_MODULE_4__","redirectTo","pathMatch","_create_ledger_create_ledger_component__WEBPACK_IMPORTED_MODULE_1__","_my_ledger_my_ledger_component__WEBPACK_IMPORTED_MODULE_2__","_ledger_setting_ledger_setting_component__WEBPACK_IMPORTED_MODULE_3__","_customize_ledger_customize_ledger_component__WEBPACK_IMPORTED_MODULE_5__","routerLinkActiveOptions","exact","LedgerRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_7__","imports","exports","_angular_core__WEBPACK_IMPORTED_MODULE_2__","LedgerSettingComponent","getLedgerData","Promise","all","getUserUsecaseData","getUserChildLedger","userData","childLedgerData","ledgerSettingDisplayList","filteredLedgerData","selectedValues","debit_gl","usercaseData","credit_gl","usecase","selectedEntry","updatedUsercaseData","userCaseId","_id","existingDataIndex","updatedLedgerData","findIndex","finalPayload","userId","assignLedgersv2","LedgerModule","_angular_common__WEBPACK_IMPORTED_MODULE_10__","_ledger_routing_module__WEBPACK_IMPORTED_MODULE_0__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_11__","_angular_router__WEBPACK_IMPORTED_MODULE_12__","_angular_forms__WEBPACK_IMPORTED_MODULE_13__","_angular_material_paginator__WEBPACK_IMPORTED_MODULE_14__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_15__","src_app_material_module__WEBPACK_IMPORTED_MODULE_4__","_angular_material_tree__WEBPACK_IMPORTED_MODULE_16__","declarations","_ledger_ledger_component__WEBPACK_IMPORTED_MODULE_1__","_create_ledger_create_ledger_component__WEBPACK_IMPORTED_MODULE_2__","_my_ledger_my_ledger_component__WEBPACK_IMPORTED_MODULE_3__","_preview_preview_component__WEBPACK_IMPORTED_MODULE_5__","_my_ledger_add_ledger_add_ledger_component__WEBPACK_IMPORTED_MODULE_6__","_ledger_setting_ledger_setting_component__WEBPACK_IMPORTED_MODULE_7__","_customize_ledger_customize_ledger_component__WEBPACK_IMPORTED_MODULE_8__","LedgerComponent","route","snapshot","navigate","relativeTo","defaultLedgerFlag","_angular_core__WEBPACK_IMPORTED_MODULE_1__","AddLedgerComponent","parentGlNumber","createLedgerFlag","close","newLedgerName","parentAccount","ledgerNameArr","requestData","parentLedgerNumber","addCustomLedger","message","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__","MyLedgerComponent","getUserLedger2","status"],"sources":["webpack:///src/app/core/services/default-page-resolver.service.ts","webpack:///src/app/pages/ledger/create-ledger/create-ledger.component.html","webpack:///src/app/pages/ledger/create-ledger/create-ledger.component.ts","webpack:///src/app/pages/ledger/customize-ledger/customize-ledger.component.html","webpack:///src/app/pages/ledger/customize-ledger/customize-ledger.component.ts","webpack:///src/app/pages/ledger/ledger-routing.module.ts","webpack:///src/app/pages/ledger/ledger-setting/ledger-setting.component.html","webpack:///src/app/pages/ledger/ledger-setting/ledger-setting.component.ts","webpack:///src/app/pages/ledger/ledger.module.ts","webpack:///src/app/pages/ledger/ledger/ledger.component.ts","webpack:///src/app/pages/ledger/ledger/ledger.component.html","webpack:///src/app/pages/ledger/my-ledger/add-ledger/add-ledger.component.html","webpack:///src/app/pages/ledger/my-ledger/add-ledger/add-ledger.component.ts","webpack:///src/app/pages/ledger/my-ledger/my-ledger.component.html","webpack:///src/app/pages/ledger/my-ledger/my-ledger.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\nimport { LedgerServiceService } from './ledger-service.service';\r\nimport { Observable, from } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DefaultPageResolverService implements Resolve<string> {\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  defaultLedgerFlag: boolean;\r\n\r\n  constructor(private ledgerService: LedgerServiceService) { }\r\n\r\n  resolve(): Observable<string> {\r\n    // Call your API to get the masterLedgerTrueFalse value\r\n    const currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n\r\n    return from(this.ledgerService.masterLedgerTrueFalse({}, currentUser.id)).pipe(\r\n      map((res: any) => {\r\n        const masterLedgerTrueFalse = res.data.result; // Assuming 'result' contains the boolean value\r\n        return masterLedgerTrueFalse ? 'master-ledger' : 'create-ledger';\r\n      })\r\n    );\r\n  }\r\n}\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n  <div class=\"loader\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Suggestion ==> Search bar and buttons should be here. -->\r\n<!-- <div class=\"row headerButtons mb-3\" id=\"showoptionHide\">\r\n  <div class=\"flex-item searchBar\">\r\n    <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5 my-2\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n  </div>\r\n  <div class=\"navOption-btns flex-item formButtons mx-0\">\r\n    <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n      Preview\r\n    </button>\r\n  </div>\r\n</div> -->\r\n\r\n\r\n<div id=\"navPanel\" class=\"row\">\r\n    <div class=\"navOptions col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-6 ps-0\" style=\"margin-top: 4.25%; border-top: 1px solid #ccc;\">\r\n          <ul class=\"tree\">\r\n            <li>\r\n              <input type=\"checkbox\" id=\"c1\" (click)=\"allCategories()\"/>\r\n              <label class=\"tree_label\" for=\"c1\">Category</label>\r\n              <ul class=\"tree\">\r\n                <li *ngFor=\"let rootCategory of sideTree\">\r\n                  <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: rootCategory.entry }\"></ng-container>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n\r\n          <ng-template #displayCategoryTemplate let-category=\"category\">\r\n            <li>\r\n              <input type=\"checkbox\" id=\"{{ category.glNumber }}\" (click)=\"toggleNode(category)\" />\r\n              <label class=\"tree_label\" for=\"{{ category.glNumber }}\">{{ category.glName }}</label>\r\n              <ul class=\"tree\">\r\n                <li *ngFor=\"let childCategory of category.children\">\r\n                  <div *ngIf=\"childCategory.children.length > 0\">\r\n                    <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: childCategory }\"></ng-container>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ng-template>\r\n    </div>\r\n\r\n    <div class=\"col-xxl-10 col-xl-10 col-lg-9 col-md-8 col-sm-6 ps-0\">\r\n\r\n        <!-- <div class=\"row d-flex flex-center mb-3\">\r\n            <div class=\"col-md-1 col-lg-5 col-xl-6\"></div>\r\n            <div class=\"col-sm-4 col-md-3 col-lg-3 col-xl-3 mt-2\">\r\n              <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n            </div>\r\n            <div class=\"navOption-btns col-sm-8 col-md-8 col-lg-4 col-xl-3 mt-2\"\r\n                style=\"display:flex;justify-content: space-around !important;align-items: center;\">\r\n                <button class=\"btn text-nowrap\" type=\"button\" (click)=\"openCreateLedgerModal()\"><i class=\"fas fa-plus me-2\"> </i>Add New Ledger\r\n                </button>\r\n                <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n                    Preview\r\n                </button>\r\n            </div>\r\n        </div> -->\r\n\r\n        <div class=\"row headerButtons mb-3\" id=\"showoptionHide\">\r\n          <div class=\"flex-item searchBar\">\r\n            <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5 my-2\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n          </div>\r\n          <div class=\"navOption-btns flex-item formButtons mx-0\">\r\n            <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n              Preview\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- <hr class=\"my-0 py-0\" /> -->\r\n        <div style=\"border-left: 2px solid #ccc; overflow-x: auto;\">\r\n          <table class=\"table table-responsive mb-0\">\r\n              <thead class=\"text-600\">\r\n                <tr>\r\n                  <th class=\"text-nowrap col-1\" style=\"vertical-align: middle;\">\r\n                    <input type=\"checkbox\" class=\"form-check-input mt-2\" [(ngModel)]=\"selectAllChecked\" (change)=\"toggleSelectAll()\" />\r\n                  </th>\r\n                  <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Code</th>\r\n                  <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Ledger</th>\r\n                  <!-- <th class=\"text-nowrap\" style=\"vertical-align: middle;\"></th> -->\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr class=\"btn-reveal-trigger text-left\" style=\"color: #676398!important;\" [ngStyle]=\"{'background-color': (i % 2 === 0 ? '#ffffff' : '#f2f2f2')}\" *ngFor=\"let child of sideTreeData; let i = index\">\r\n                  <td scope=\"row\" style=\"vertical-align: middle;\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"child.selected\" id=\"{{ child.glNumber }}\" (change)=\"handleCheckboxChange(child)\" />\r\n                  </td>\r\n                  <td style=\"vertical-align:middle;\">{{ child.glNumber }}</td>\r\n                  <td style=\"vertical-align:middle;\" for=\"child.glNumber\">{{ child.glName }}</td>\r\n                  <!-- <td *ngIf=\"child.children.length === 0\">\r\n                    <button class=\"btn\" (click)=\"openAddLedgerModal(child.glNumber, child.glName)\" style=\"color: #FC7643;\">\r\n                      <i class=\"fas fa-plus\"></i>\r\n                    </button>\r\n                  </td> -->\r\n                </tr>\r\n              </tbody>\r\n          </table>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from \"@angular/material/tree\";\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { PreviewComponent } from '../preview/preview.component';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { AddLedgerComponent } from '../my-ledger/add-ledger/add-ledger.component';\r\n  \r\n@Component({\r\n  selector: 'app-create-ledger',\r\n  templateUrl: './create-ledger.component.html',\r\n  styleUrls: ['./create-ledger.component.scss']\r\n})\r\nexport class CreateLedgerComponent implements OnInit {\r\n  isLoading: boolean = false;\r\n  searchTerm: string = '';\r\n\r\n  ledgerList: any[] = [  ];\r\n  selectedItems: any[] = []; // Array to store selected items\r\n  selectAllChecked: boolean = false; // Initialize with false\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  categories: any[] = [];\r\n  sideTree: any[];\r\n  sideTreeData: any[] = [];\r\n\r\n  constructor(public dialog: MatDialog,\r\n      private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n      private titleCasePipe: TitleCasePipe) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAllGlnames().then(() => {\r\n      // console.log(this.sideTreeData)\r\n      this.ledgerService.setLedgerData(this.sideTreeData);\r\n    });\r\n  }\r\n\r\n  // recursive function to get all the childrens and their childrens dynamically\r\n  filterEntriesWithChildren(entries: any[]): any[] {\r\n    return entries.map(entry => {\r\n      this.categories.push(entry)   // adding all the entries one by one into the category array\r\n      const children = entry.children.length > 0 ? this.filterEntriesWithChildren(entry.children) : [];   //calling the same function n times and passing their children as a argument\r\n      return { entry, ...entry.children, children }; // getting the parent entry and children of that entry and grand children as well\r\n    })\r\n  }\r\n\r\n  allCategories(){\r\n    this.sideTreeData = this.categories\r\n  }\r\n\r\n  // get all the ledger entries structures from backend\r\n  async getAllGlnames(): Promise<void> {\r\n    this.isLoading = true;\r\n    try {\r\n      const res = await this.ledgerService.getAllGlnames({}, this.currentUser.id);\r\n      if (res.success) {\r\n        const rawData = res.data;\r\n        console.log(rawData);\r\n        // this.filterChildrenWithEmptyGrandchildren(rawData)\r\n        this.sideTreeData = this.categories;\r\n        // Filter out entries with no children recursively\r\n        const categories = this.filterEntriesWithChildren(rawData);\r\n        console.log(categories);\r\n        this.sideTree = categories;\r\n        // const categories = this.filterEntriesWithChildren(rawData);\r\n        // this.sideTreeData = categories;\r\n        // let flattenedData = this.flattenCategory(categories);\r\n        // console.log(flattenedData);\r\n        // this.sideTreeData = flattenedData;\r\n        // this.sideTree = this.extractChildren(rawData);\r\n        // rawData.forEach((entry) => {\r\n        //   console.log(entry)\r\n        //   this.sideTree.push(...this.extractChildren(entry));\r\n        // });\r\n        // console.log(this.sideTree)\r\n      }\r\n    } catch (err) {\r\n      // if (err.error.status == 404) {\r\n      //   this.toastService.openErrorSnackBar(err.error.message);\r\n      // } else {\r\n        this.toastService.openErrorSnackBar(err);\r\n      // }\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  /// Recursive function to flatten the hierarchical structure\r\n  flattenCategory(category) {\r\n    const result: any[] = [];\r\n\r\n    // Add the current category\r\n    result.push(category);\r\n\r\n    // Recursively add children\r\n    if (category.children && category.children.length > 0) {\r\n      for (const child of category.children) {\r\n        const childData = this.flattenCategory(child);\r\n        result.push(...childData);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toggleNode(category): void {\r\n    this.isLoading = true;\r\n    setTimeout(() => { \r\n      const existingCategory = this.categories.find(c => c.glNumber === category.glNumber);\r\n      \r\n      // if (existingCategory) {\r\n      //   const filteredData = this.filterChildrenWithEmptyGrandchildren(existingCategory.children);\r\n      //   this.sideTreeData = filteredData;\r\n      // } else {\r\n      //   this.sideTreeData = this.categories;\r\n      // }\r\n      if (existingCategory) {\r\n        const flattenedData = this.flattenCategory(existingCategory);\r\n        console.log(flattenedData);\r\n        this.sideTreeData = flattenedData;\r\n      } else {\r\n        this.sideTreeData = this.categories;\r\n      }\r\n  \r\n      // Update selectedItems and selectAllChecked based on existing selections\r\n      this.updateSelectedItemsAndSelectAll();\r\n  \r\n      this.isLoading = false;\r\n    }, 1000);\r\n  }\r\n\r\n  filterChildrenWithEmptyGrandchildren(children): any[] {\r\n    const filteredChildren = children.filter(child => {\r\n      return child.children.length === 0 || this.hasEmptyGrandchildren(child.children);\r\n    });\r\n  \r\n    const nextLevelChildren = [];\r\n    for (const child of filteredChildren) {\r\n      nextLevelChildren.push(...child.children);\r\n    }\r\n  \r\n    if (nextLevelChildren.length > 0) {\r\n      return this.filterChildrenWithEmptyGrandchildren(nextLevelChildren);\r\n    }\r\n  \r\n    return filteredChildren;\r\n  }\r\n  \r\n  hasEmptyGrandchildren(children): boolean {\r\n    return children.some(grandchild => grandchild.children.length === 0);\r\n  }\r\n\r\n  // Add this function to update selectedItems and selectAllChecked\r\n  updateSelectedItemsAndSelectAll(): void {\r\n    const allSelected = this.sideTreeData.every(item => item.selected);\r\n    const someSelected = this.sideTreeData.some(item => item.selected);\r\n  \r\n    if (allSelected) {\r\n      this.selectAllChecked = true;\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else if (someSelected) {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = this.sideTreeData.filter(item => item.selected);\r\n    } else {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  displayCategory(category): void {\r\n    if (category.children.length === 0) {\r\n      console.log(category.glNumber, category.glName); // Display only if no children\r\n    } else {\r\n      console.log(category.glNumber, category.glName); // Display parent\r\n      for (const child of category.children) {\r\n        this.displayCategory(child); // Recursively display children\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange(item: any): void {\r\n    if (item.selected) {\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      const index = this.selectedItems.indexOf(item);\r\n      if (index !== -1) {\r\n        this.selectedItems.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    this.updateSelectAllCheckedState();\r\n    // Call updateSelectedItemsAndSelectAll to sync with selectAllChecked\r\n    this.updateSelectedItemsAndSelectAll();\r\n  }\r\n\r\n  toggleSelectAll(): void {\r\n    // this.selectAllChecked = !this.selectAllChecked;\r\n    for (const item of this.sideTreeData) {\r\n      item.selected = this.selectAllChecked;\r\n    }\r\n\r\n    // Update the selected items list as well\r\n    if (this.selectAllChecked) {\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  updateSelectAllCheckedState(): void {\r\n    this.selectAllChecked = this.sideTreeData.length > 0 && this.sideTreeData.every(item => item.selected);\r\n  }\r\n\r\n  openPreviewDialog(): void {\r\n    if(this.selectedItems && this.selectedItems.length > 0){\r\n      const dialogRef: MatDialogRef<PreviewComponent> = this.dialog.open(PreviewComponent, {\r\n        width: '800px', // Adjust the width as per your requirement\r\n        height : '100vh',\r\n        data: { \r\n          selectedItems: this.selectedItems,\r\n          allGlData : this.categories \r\n        }, // Pass the selected items to the modal\r\n        panelClass: 'custom-dialog-class',\r\n        disableClose:true,\r\n        position: {\r\n          right: '0',\r\n        },\r\n      });\r\n      \r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(`Dialog result: ${result}`);\r\n      });\r\n    } else {\r\n      this.toastService.openErrorSnackBar(\"There is not selected any ledger. Please select a ledger.\")\r\n    }\r\n  }\r\n\r\n  openAddLedgerModal(glNumber: string, glName: string): void {\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { glNumber, glName } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  openCreateLedgerModal(): void {\r\n    const createLedger = true\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { createLedger } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n  \r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.sideTreeData = this.categories;\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.sideTreeData = this.categories.filter(item => {\r\n        // Modify the condition as needed for your search criteria\r\n        return item.glNumber.toLowerCase().includes(searchTerm) || item.glName.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n  <div class=\"loader\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div id=\"navPanel\" class=\"row\">\r\n  <div class=\"navOptions col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-6 ps-0\"\r\n    style=\"margin-top: 4.25%; border-top: 1px solid #ccc;\">\r\n    <ul class=\"tree\">\r\n      <li>\r\n        <input type=\"checkbox\" #myButtonCustomize id=\"c1\" (click)=\"allCategories()\" />\r\n        <label class=\"tree_label\" for=\"c1\">Category</label>\r\n        <ul class=\"tree\">\r\n          <li *ngFor=\"let rootCategory of sideTree\">\r\n            <ng-container\r\n              *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: rootCategory.entry }\"></ng-container>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n\r\n    <ng-template #displayCategoryTemplate let-category=\"category\">\r\n      <li>\r\n        <input type=\"checkbox\" id=\"{{ category.glNumber }}\" (click)=\"toggleNode(category)\" />\r\n        <label class=\"tree_label\" for=\"{{ category.glNumber }}\">{{ category.glName }}</label>\r\n        <ul class=\"tree\">\r\n          <li *ngFor=\"let childCategory of category.children\">\r\n            <div *ngIf=\"childCategory.children.length > 0\">\r\n              <ng-container\r\n                *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: childCategory }\"></ng-container>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"col-xxl-10 col-xl-10 col-lg-9 col-md-8 col-sm-6 ps-0\">\r\n    <div class=\"row d-flex flex-center mb-3\">\r\n      <div class=\"col-md-1 col-lg-5 col-xl-6\"></div>\r\n      <div class=\"col-sm-4 col-md-3 col-lg-3 col-xl-3 mt-2\">\r\n        <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\"\r\n          (ngModelChange)=\"filterData()\" />\r\n      </div>\r\n      <div class=\"navOption-btns col-sm-8 col-md-8 col-lg-4 col-xl-3 mt-2\"\r\n        style=\"display:flex;justify-content: space-around !important;align-items: center;\">\r\n        <button class=\"btn text-nowrap\" type=\"button\" (click)=\"openCreateLedgerModal()\"><i class=\"fas fa-plus me-2\">\r\n          </i>Add New Ledger\r\n        </button>\r\n        <!-- <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n                      Preview\r\n                  </button> -->\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <hr class=\"my-0 py-0\" /> -->\r\n    <div style=\"border-left: 2px solid #ccc; overflow-x: auto;\">\r\n      <table class=\"table table-responsive mb-0\">\r\n        <thead class=\"text-600\">\r\n          <tr>\r\n            <th class=\"text-nowrap col-1\" style=\"vertical-align: middle;\">\r\n              <input type=\"checkbox\" class=\"form-check-input mt-2\" [(ngModel)]=\"selectAllChecked\"\r\n                (change)=\"toggleSelectAll()\" />\r\n            </th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Code</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Ledger</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align: middle;\"></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr class=\"btn-reveal-trigger text-left\" style=\"color: #676398!important;\"\r\n            [ngStyle]=\"{'background-color': (i % 2 === 0 ? '#ffffff' : '#f2f2f2')}\"\r\n            *ngFor=\"let child of sideTreeData; let i = index\">\r\n            <td scope=\"row\" style=\"vertical-align: middle;\" *ngIf=\"child.children.length === 0\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"child.selected\" id=\"{{ child.glNumber }}\"\r\n                (change)=\"handleCheckboxChange(child)\" [checked]=\"child.gl_flag\" [disabled]=\"child.gl_flag\"/>\r\n            </td>\r\n            <td style=\"vertical-align:middle;\" *ngIf=\"child.children.length === 0\">{{ child.glNumber }}</td>\r\n            <td style=\"vertical-align:middle;\" *ngIf=\"child.children.length === 0\" for=\"child.glNumber\">{{ child.glName\r\n              }}</td>\r\n            <td *ngIf=\"child.children.length === 0\">\r\n              <button class=\"btn\" (click)=\"openAddLedgerModal(child.glNumber, child.glName)\" style=\"color: #FC7643;\">\r\n                <i class=\"fas fa-plus\"></i>\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { ChangeDetectorRef, Component, OnInit, NgZone, ChangeDetectionStrategy, ViewChild, ElementRef, Renderer2 } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { PreviewComponent } from '../preview/preview.component';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { AddLedgerComponent } from '../my-ledger/add-ledger/add-ledger.component';\r\n\r\n@Component({\r\n  selector: 'app-customize-ledger',\r\n  templateUrl: './customize-ledger.component.html',\r\n  styleUrls: ['./customize-ledger.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomizeLedgerComponent implements OnInit {\r\n  @ViewChild('myButtonCustomize') myButton: ElementRef;\r\n  searchTerm: string = '';\r\n\r\n  isLoading: boolean = false;\r\n  isDisabled: boolean = false;\r\n  ledgerList: any[] = [];\r\n  selectedItems: any[] = []; // Array to store selected items\r\n  selectAllChecked: boolean = false; // Initialize with false\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  categories: any[] = [];\r\n  sideTree: any[];\r\n  sideTreeData: any[] = [];\r\n  masterLedger: any[] = [];\r\n  preSelectedEntries: any[] = []; // Initialize with the entries you want to pre-select\r\n\r\n  constructor(public dialog: MatDialog, private router: Router, private cdr: ChangeDetectorRef,\r\n    private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n    private titleCasePipe: TitleCasePipe, private ngZone: NgZone,\r\n    private renderer: Renderer2) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getAllGlnames()\r\n  }\r\n\r\n  // recursive function to get all the childrens and their childrens dynamically\r\n  filterEntriesWithChildren(entries: any[]): any[] {\r\n    return entries.map(entry => {\r\n      this.categories.push(entry)   // adding all the entries one by one into the category array\r\n      const children = entry.children.length > 0 ? this.filterEntriesWithChildren(entry.children) : [];   //calling the same function n times and passing their children as a argument\r\n      return { entry, ...entry.children, children }; // getting the parent entry and children of that entry and grand children as well\r\n    })\r\n  }\r\n\r\n  allCategories() {\r\n    console.log('allCategories')\r\n    this.sideTreeData = this.categories\r\n    this.sideTreeData.forEach(item => {\r\n      if (item.gl_flag === true) {\r\n        item.selected = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  // get all the ledger entries structures from backend\r\n  getAllGlnames() {\r\n    try {\r\n      this.isLoading = true;\r\n      this.ledgerService.getAllGlnames({}, this.currentUser.id)\r\n        .then((res) => {\r\n          if (res.success) {\r\n            const rawData = res.data;\r\n\r\n            // Pre-select entries with gl_flag === true\r\n            rawData.forEach(entry => {\r\n              if (entry.gl_flag) {\r\n                entry.selected = true;\r\n              }\r\n            });\r\n\r\n            const categories = this.filterEntriesWithChildren(rawData);\r\n\r\n            this.sideTree = categories;\r\n            console.log(this.sideTree);\r\n            this.isLoading = false;\r\n            this.cdr.markForCheck();\r\n            this.renderer.selectRootElement(this.myButton.nativeElement).click();\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.ngZone.run(() => {\r\n            this.isLoading = false;\r\n            this.cdr.markForCheck();\r\n            this.toastService.openErrorSnackBar(\"An error occurred\");\r\n          });\r\n        })\r\n        .finally(() => {\r\n          this.isLoading = false;\r\n          this.cdr.markForCheck();\r\n        });\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  }\r\n\r\n  /// Recursive function to flatten the hierarchical structure\r\n  flattenCategory(category) {\r\n    const result: any[] = [];\r\n\r\n    // Add the current category\r\n    result.push(category);\r\n\r\n    // Recursively add children\r\n    if (category.children && category.children.length > 0) {\r\n      for (const child of category.children) {\r\n        const childData = this.flattenCategory(child);\r\n        result.push(...childData);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toggleNode(category): void {\r\n    this.isLoading = true;\r\n      // console.log(category)\r\n      const existingCategory = this.categories.find(c => c.glNumber === category.glNumber);\r\n\r\n      if (existingCategory) {\r\n        const flattenedData = this.flattenCategory(existingCategory);\r\n        console.log(flattenedData);\r\n        this.sideTreeData = flattenedData;\r\n      } else {\r\n        this.sideTreeData = this.categories;\r\n      }\r\n\r\n\r\n      this.sideTreeData.forEach(item => {\r\n        if (item.gl_flag === true) {\r\n          item.selected = true;\r\n        }\r\n      });\r\n      // Update selectedItems and selectAllChecked based on existing selections\r\n      this.updateSelectedItemsAndSelectAll();\r\n\r\n      this.isLoading = false;\r\n      this.cdr.markForCheck();\r\n  }\r\n\r\n  // filterChildrenWithEmptyGrandchildren(children): any[] {\r\n  //   const filteredChildren = children.filter(child => {\r\n  //     return child.children.length === 0 || this.hasEmptyGrandchildren(child.children);\r\n  //   });\r\n\r\n  //   const nextLevelChildren = [];\r\n  //   for (const child of filteredChildren) {\r\n  //     nextLevelChildren.push(...child.children);\r\n  //   }\r\n\r\n  //   if (nextLevelChildren.length > 0) {\r\n  //     return this.filterChildrenWithEmptyGrandchildren(nextLevelChildren);\r\n  //   }\r\n\r\n  //   return filteredChildren;\r\n  // }\r\n\r\n  hasEmptyGrandchildren(children): boolean {\r\n    return children.some(grandchild => grandchild.children.length === 0);\r\n  }\r\n\r\n  // Add this function to update selectedItems and selectAllChecked\r\n  updateSelectedItemsAndSelectAll(): void {\r\n    const allSelected = this.sideTreeData.every(item => item.selected);\r\n    const someSelected = this.sideTreeData.some(item => item.selected);\r\n\r\n    if (allSelected) {\r\n      this.selectAllChecked = true;\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else if (someSelected) {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = this.sideTreeData.filter(item => item.selected);\r\n    } else {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  displayCategory(category): void {\r\n    if (category.children.length === 0) {\r\n      console.log(category.glNumber, category.glName); // Display only if no children\r\n    } else {\r\n      console.log(category.glNumber, category.glName); // Display parent\r\n      for (const child of category.children) {\r\n        this.displayCategory(child); // Recursively display children\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange(item: any): void {\r\n\r\n    if (item.selected) {\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      const index = this.selectedItems.indexOf(item);\r\n      if (index !== -1) {\r\n        this.selectedItems.splice(index, 1);\r\n      }\r\n    }\r\n    this.updateSelectAllCheckedState();\r\n    // Call updateSelectedItemsAndSelectAll to sync with selectAllChecked\r\n    this.updateSelectedItemsAndSelectAll();\r\n  }\r\n\r\n  toggleSelectAll(): void {\r\n    // this.selectAllChecked = !this.selectAllChecked;\r\n    for (const item of this.sideTreeData) {\r\n      item.selected = this.selectAllChecked;\r\n    }\r\n\r\n    // Update the selected items list as well\r\n    if (this.selectAllChecked) {\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  updateSelectAllCheckedState(): void {\r\n    this.selectAllChecked = this.sideTreeData.length > 0 && this.sideTreeData.every(item => item.selected);\r\n  }\r\n\r\n  openAddLedgerModal(glNumber: string, glName: string): void {\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { glNumber, glName } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  openCreateLedgerModal(): void {\r\n    const createLedger = true\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { createLedger } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n\r\n\r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.sideTreeData = this.categories;\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.sideTreeData = this.categories.filter(item => {\r\n        // Modify the condition as needed for your search criteria\r\n        return item.glNumber.toLowerCase().includes(searchTerm) || item.glName.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LedgerComponent } from './ledger/ledger.component';\r\nimport { CreateLedgerComponent } from './create-ledger/create-ledger.component';\r\nimport { MyLedgerComponent } from './my-ledger/my-ledger.component';\r\nimport { LedgerSettingComponent } from './ledger-setting/ledger-setting.component';\r\nimport { DefaultPageResolverService } from 'src/app/core/services/default-page-resolver.service';\r\nimport { CustomizeLedgerComponent } from './customize-ledger/customize-ledger.component';\r\n\r\nconst routes: Routes = [\r\n  { \r\n    path: '',\r\n    component : LedgerComponent,\r\n    resolve: {\r\n      defaultPage: DefaultPageResolverService, // Use the resolver here\r\n    },\r\n    children : [\r\n      { \r\n        path: '', \r\n        redirectTo: 'master-ledger',\r\n        pathMatch: 'full'\r\n      },\r\n      { \r\n        path: 'create-ledger', \r\n        component: CreateLedgerComponent\r\n      },\r\n      { \r\n        path: 'master-ledger', \r\n        component: MyLedgerComponent\r\n      },\r\n      { \r\n        path: 'ledger-setting', \r\n        component: LedgerSettingComponent\r\n      },\r\n      { \r\n        path: 'customize-ledger',  \r\n        component: CustomizeLedgerComponent\r\n      },\r\n    ],\r\n    pathMatch: 'prefix',\r\n    data: {\r\n      routerLinkActiveOptions: { exact: true, pathMatch: 'full' }\r\n    }\r\n  },\r\n  \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LedgerRoutingModule { }\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n  <div class=\"loader\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row headerButtons mb-3\" id=\"showoptionHide\">\r\n  <div class=\"flex-item searchBar me-4\">\r\n    <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5 my-2\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n  </div>\r\n</div>\r\n\r\n<!-- <hr class=\"mb-1\"> -->\r\n\r\n<div style = \"width: 100%;overflow-x: auto;\">\r\n\r\n  <table class=\"table table-responsive table-bordered fs--1 mb-0\">\r\n\r\n    <thead class=\"text-600\">\r\n        <tr>\r\n\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:100px;\">SR.NO.</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:auto;\">Ledger Name</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:10%;text-align: center;\">Debit GL</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:10%;text-align: center;\">Credit GL</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:200px;text-align: center;\">\r\n              <button class=\"btn-save\" (click)=\"saveAll()\" *ngIf=\"updatedLedgerData.length > 0\">Save</button>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        <tr class=\"btn-reveal-trigger text-left\" *ngFor=\"let item of ledgerSettingDisplayList; let i = index\">\r\n            <td style=\"vertical-align:middle;\">{{item.usecaseId}}</td>\r\n            <td class = \"text-nowrap\" style=\"vertical-align:middle;\">{{item.usecase}}</td>\r\n            <td style=\"vertical-align:middle;text-align: center;\">\r\n              <mat-form-field appearance=\"outline\" style=\"width: 80%;\">\r\n                <mat-select [(ngModel)]=\"selectedValues[i].debit_gl\" (ngModelChange)=\"saveRow(i)\">\r\n                  <mat-option *ngFor=\"let entry of filteredLedgerData\" [value]=\"entry.glNumber\">\r\n                    {{ entry.glNumber }}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </td>\r\n            <td style=\"vertical-align:middle;text-align: center;\">\r\n              <mat-form-field appearance=\"outline\" style=\"width: 80%;\">\r\n                <mat-select [(ngModel)]=\"selectedValues[i].credit_gl\" (ngModelChange)=\"saveRow(i)\">\r\n                  <mat-option *ngFor=\"let entry of filteredLedgerData\" [value]=\"entry.glNumber\">\r\n                    {{ entry.glNumber }}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </td>\r\n            <td></td>\r\n        </tr>\r\n    </tbody>\r\n\r\n    <tbody *ngIf=\"ledgerSettingDisplayList.length <= 0\">\r\n      <tr class=\"text-center\">\r\n          <td colspan=\"10\">\r\n              <img class=\"image-responsive\" src=\"../../../assets/img/icons/spot-illustrations/notfound1.png\"\r\n                  alt=\"notfound1\" width=\"200\" height=\"150\" />\r\n          </td>\r\n      </tr>\r\n    </tbody>\r\n\r\n  </table>\r\n\r\n</div>\r\n","import { TitleCasePipe } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\n\r\n@Component({\r\n  selector: 'app-ledger-setting',\r\n  templateUrl: './ledger-setting.component.html',\r\n  styleUrls: ['./ledger-setting.component.scss']\r\n})\r\nexport class LedgerSettingComponent implements OnInit {\r\n\r\n  searchTerm: string = '';\r\n  ledgerSettingDisplayList : any[] = []\r\n  updatedLedgerData: any[] = [];\r\n  isLoading: boolean = false;\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n\r\n  ledgerSettingList =  [];\r\n  selectedGlNumber: string; // Property to store the selected glNumber\r\n  filteredLedgerData: any[] = []; // Property to store the filtered ledger data\r\n  selectedValues: any[] = [];\r\n  selectedEntry: any;\r\n  glList: any[];\r\n\r\n  constructor(private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n    private titleCasePipe: TitleCasePipe, private cdr: ChangeDetectorRef,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getLedgerData();\r\n  }\r\n  \r\n  async getLedgerData(): Promise<void> {\r\n    try {\r\n      this.isLoading = true;\r\n      const [userData, childLedgerData] = await Promise.all([\r\n        this.ledgerService.getUserUsecaseData({}, this.currentUser.id),\r\n        this.ledgerService.getUserChildLedger({}, this.currentUser.id)\r\n      ]);\r\n\r\n      this.ledgerSettingDisplayList = userData.data;\r\n      this.filteredLedgerData = childLedgerData.data;\r\n\r\n      // Initialize selectedValues based on ledgerSettingDisplayList\r\n      this.selectedValues = this.ledgerSettingDisplayList.map((item: any) => ({\r\n        debit_gl: item.usercaseData.debit_gl,\r\n        credit_gl: item.usercaseData.credit_gl,\r\n      }))\r\n      // Filter the filteredLedgerData array to exclude selected values\r\n      // this.glList = this.filteredLedgerData.filter(entry => {\r\n      //   const isDebitSelected = this.selectedValues.some(selected => selected.debit_gl === entry.glNumber);\r\n      //   const isCreditSelected = this.selectedValues.some(selected => selected.credit_gl === entry.glNumber);\r\n\r\n      //   // Exclude entries that are selected as debit or credit\r\n      //   return !isDebitSelected && !isCreditSelected;\r\n      // });\r\n      // Create a set to store the selected GLs (both debit and credit)\r\n      //   const selectedGLs = new Set<string>();\r\n      //   this.selectedValues.forEach((value) => {\r\n      //     if (value.debit_gl) {\r\n      //       selectedGLs.add(value.debit_gl);\r\n      //     }\r\n      //     if (value.credit_gl) {\r\n      //       selectedGLs.add(value.credit_gl);\r\n      //     }\r\n      //   });\r\n\r\n      // // Filter the glList to exclude selected values\r\n      // this.glList = this.filteredLedgerData.filter((entry) => !selectedGLs.has(entry.glNumber));\r\n      // console.log(this.glList)\r\n      this.isLoading = false;\r\n      this.cdr.markForCheck();\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      }\r\n  }\r\n\r\n  // Function to update selected values when a user makes a selection\r\n  // async updateSelectedValues(index: number): Promise<void> {\r\n  //   try {\r\n  //     this.selectedEntry = this.ledgerSettingDisplayList[index];\r\n\r\n  //     // Create a new object with the updated usercaseData\r\n  //     const updatedUsercaseData = {\r\n  //       credit_gl: this.selectedValues[index].credit_gl,\r\n  //       debit_gl: this.selectedValues[index].debit_gl,\r\n  //       userCaseId: this.selectedEntry.usercaseData.userCaseId,\r\n  //       _id: this.selectedEntry.usercaseData._id,\r\n  //     };\r\n  //     // Call the API with the updated values\r\n  //     const updatedData = {\r\n  //       userId : this.currentUser.id,\r\n  //       usecaseId: this.selectedEntry.usecaseId,\r\n  //       usecase: this.selectedEntry.usecase,\r\n  //       usercaseData: updatedUsercaseData,\r\n  //       // usercaseData: this.selectedValues[index],\r\n  //     };\r\n  //     console.log(updatedData)\r\n  //     const res = await this.ledgerService.assignLedgersv2(updatedData, this.currentUser.id);\r\n  //     console.log('API response:', res.data);\r\n  //   } catch (error) {\r\n  //     console.error('API error:', error);\r\n  //   }\r\n  // }\r\n  \r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n  \r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.getLedgerData();\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.ledgerSettingDisplayList = this.ledgerSettingDisplayList.filter(item => {\r\n        return item.usecase.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n\r\n  saveRow(index: number): void {\r\n    const selectedEntry = this.ledgerSettingDisplayList[index];\r\n  \r\n    const updatedUsercaseData = {\r\n      credit_gl: this.selectedValues[index].credit_gl,\r\n      debit_gl: this.selectedValues[index].debit_gl,\r\n      userCaseId: selectedEntry.usercaseData.userCaseId,\r\n      _id: selectedEntry.usercaseData._id,\r\n    };\r\n  \r\n    // Check if the data is already in updatedLedgerData array, if not, add it\r\n    const existingDataIndex = this.updatedLedgerData.findIndex(\r\n      (data) => data.userCaseId === updatedUsercaseData.userCaseId\r\n    );\r\n  \r\n    if (existingDataIndex === -1) {\r\n      this.updatedLedgerData.push(updatedUsercaseData);\r\n    } else {\r\n      // If the data already exists, update it\r\n      this.updatedLedgerData[existingDataIndex] = updatedUsercaseData;\r\n    }\r\n  }\r\n  \r\n  async saveAll(): Promise<void> {\r\n    try {\r\n      // Create the final payload with all updated data\r\n      const finalPayload = {\r\n        userId: this.currentUser.id,\r\n        data: this.updatedLedgerData,\r\n      };\r\n  \r\n      console.log(finalPayload);\r\n  \r\n      // Call the API with the final payload\r\n      const res = await this.ledgerService.assignLedgersv2(finalPayload, this.currentUser.id).then((res) => {\r\n        if(res.success){\r\n          console.log('API response:', res.data);\r\n          this.updatedLedgerData = []; // make sure to empty the array after updating the ledger data\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.error('API error:', error);\r\n    }\r\n  }\r\n  \r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LedgerRoutingModule } from './ledger-routing.module';\r\nimport { LedgerComponent } from './ledger/ledger.component';\r\nimport { CreateLedgerComponent } from './create-ledger/create-ledger.component';\r\nimport { MyLedgerComponent } from './my-ledger/my-ledger.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MaterialExampleModule } from 'src/app/material.module';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { PreviewComponent } from './preview/preview.component';\r\nimport { AddLedgerComponent } from './my-ledger/add-ledger/add-ledger.component';\r\nimport { LedgerSettingComponent } from './ledger-setting/ledger-setting.component';\r\nimport { CustomizeLedgerComponent } from './customize-ledger/customize-ledger.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LedgerComponent,\r\n    CreateLedgerComponent,\r\n    MyLedgerComponent,\r\n    PreviewComponent,\r\n    AddLedgerComponent,\r\n    LedgerSettingComponent,\r\n    CustomizeLedgerComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LedgerRoutingModule,\r\n    MatIconModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MaterialExampleModule,\r\n    MatTreeModule,\r\n  ]\r\n})\r\nexport class LedgerModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\n\r\n@Component({\r\n  selector: 'app-ledger',\r\n  templateUrl: './ledger.component.html',\r\n  styleUrls: ['./ledger.component.scss']\r\n})\r\n\r\nexport class LedgerComponent implements OnInit {\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  defaultLedgerFlag: boolean;\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router, private ledgerService : LedgerServiceService) {}\r\n  \r\n  ngOnInit(): void {\r\n    /// Access the resolved data\r\n    const defaultPage: string = this.route.snapshot.data.defaultPage;\r\n\r\n    // this.router.navigate([defaultPage], { relativeTo: this.route });\r\n    \r\n    // Use the resolved defaultPage to navigate\r\n    // Use a condition to navigate to the appropriate default page\r\n    if (defaultPage === 'create-ledger') {\r\n      this.router.navigate(['create-ledger'], { relativeTo: this.route });\r\n      this.defaultLedgerFlag = false\r\n    } else {\r\n      this.defaultLedgerFlag = true\r\n      this.router.navigate(['master-ledger'], { relativeTo: this.route });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"component-container container-fluid p-4 bg-white\">\r\n    <div id=\"navPanel\" class=\"row\">\r\n        <div class=\"navOptions col-xxl-6 col-xl-6 col-lg-12 col-md-12 col-sm-12\">\r\n            <div class=\"row page-nav-link mt-3\">\r\n                <div class=\"col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-7 links\" [hidden]=\"defaultLedgerFlag\">\r\n                    <a class=\"mt-3 pb-1 ps-1 text-nowrap\" routerLink=\"./create-ledger\" routerLinkActive=\"active\">Create\r\n                        Your Ledger</a>\r\n                </div>\r\n                <div class=\"col-xxl-1 col-xl-1 col-lg-2 col-md-3 col-sm-5 links\"[hidden]=\"!defaultLedgerFlag\">\r\n                    <a class=\"mt-3 pb-1 ps-1 text-nowrap\" routerLink=\"./master-ledger\" routerLinkActive=\"active\">Master\r\n                        Ledger</a>\r\n                </div>\r\n                <div class=\"col-xxl-1 col-xl-1 col-lg-2 col-md-3 col-sm-5 links\">\r\n                    <a class=\"mt-3 pb-1 ps-1 text-nowrap\" routerLink=\"./ledger-setting\" routerLinkActive=\"active\">Ledger Setting</a>\r\n                </div>\r\n                <div class=\"col-lg-3\"></div>\r\n            </div>\r\n    </div>\r\n    <hr class=\"mt-1\">\r\n    \r\n    <div class=\"component-container container-fluid\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n    \r\n</div>","<!-- <h2 mat-dialog-title>Add Ledgers</h2>\r\n<div mat-dialog-content>\r\n    <h3>Add Ledger under <b>{{ data.glName }}</b></h3>\r\n    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n      <input matInput [(ngModel)]=\"newLedgerName\" placeholder=\"New Ledger\" />\r\n    </mat-form-field>\r\n    <button mat-button color=\"primary\" (click)=\"addNewInput(newLedgerName)\">Add New Input</button>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"cancel()\">Cancel</button>\r\n  <button mat-button color=\"primary\" (click)=\"addLedger()\">Add Ledgers</button>\r\n</div> -->\r\n\r\n<div class=\"container\">\r\n  <div class=\"\" *ngIf=\"!createLedgerFlag\">\r\n    <h2 mat-dialog-title>Add Ledgers</h2>\r\n    <h3>Add Ledger under <b>{{ data.glName }}</b></h3>\r\n    <div mat-dialog-content>\r\n        <ng-container *ngFor=\"let entry of ledgerNameArr; let i = index\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                <input matInput [(ngModel)]=\"entry.newLedgerNames[i]\" placeholder=\"New Ledger\" />\r\n            </mat-form-field>\r\n            <!-- <button mat-button color=\"primary\" (click)=\"addNewInput(entry)\">Add New Input</button> -->\r\n        </ng-container>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <input matInput [(ngModel)]=\"newLedgerName\" placeholder=\"New Ledger\" />\r\n          </mat-form-field>\r\n          <!-- <button mat-button color=\"primary\" (click)=\"addNewInput(newLedgerName)\">Add New Input</button> -->\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button class=\"btn-cancel\" (click)=\"cancel()\">Cancel</button>\r\n      <button class=\"btn-save ms-2\" (click)=\"addLedger()\">Add Ledgers</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"\" *ngIf=\"createLedgerFlag\">\r\n    <h2 mat-dialog-title>Add New Ledger</h2>\r\n    <div mat-dialog-content>\r\n      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n        <input matInput [(ngModel)]=\"parentLedgerNumber\" placeholder=\"Parent Ledger Number\" />\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n        <input matInput [(ngModel)]=\"newLedgerName\" placeholder=\"New Ledger\" />\r\n      </mat-form-field>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button class=\"btn-cancel\" (click)=\"cancel()\">Cancel</button>\r\n      <button class=\"btn-save ms-2\" (click)=\"addLedger()\">Add Ledgers</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\n\r\n@Component({\r\n  selector: 'app-add-ledger',\r\n  templateUrl: './add-ledger.component.html',\r\n  styleUrls: ['./add-ledger.component.scss']\r\n})\r\nexport class AddLedgerComponent implements OnInit {\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  newLedgerName: string = '';\r\n  parentLedgerNumber: string = '';\r\n  ledgerNameArr: any[] = [];\r\n  parentGlNumber: string;\r\n  createLedgerFlag: boolean;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddLedgerComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private ledgerService: LedgerServiceService\r\n  ) {}\r\n  \r\n  ngOnInit(): void {\r\n    if(this.data.glNumber){\r\n      this.parentGlNumber = this.data.glNumber\r\n    }\r\n    if(this.data.createLedger){\r\n      this.createLedgerFlag = true\r\n    }\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  addNewInput(newLedgerName) {\r\n    const parentAccount = this.parentGlNumber; \r\n      if (newLedgerName.trim() !== '') {\r\n        this.ledgerNameArr.push({\r\n          glName: newLedgerName,\r\n          parentAccount: parentAccount\r\n        });\r\n      }\r\n    console.log(this.ledgerNameArr);\r\n  }\r\n\r\n  addLedger(): void {\r\n    let requestData = {}\r\n    if(this.createLedgerFlag){\r\n      requestData = {\r\n        data:[\r\n          {\r\n            glName: this.newLedgerName,\r\n            parentAccount: this.parentLedgerNumber,\r\n          }\r\n        ]\r\n      }\r\n      \r\n    } else {\r\n      requestData = {\r\n        data:[\r\n          {\r\n            glName: this.newLedgerName,\r\n            parentAccount: this.parentGlNumber,\r\n          }\r\n        ]\r\n      }\r\n      // data: this.ledgerNameArr,\r\n    }\r\n    console.log(requestData)\r\n    this.ledgerService.addCustomLedger(requestData, this.currentUser.id).then( res => {\r\n      if (res.success) {\r\n        console.log(res.message)\r\n      }\r\n    })\r\n    this.dialogRef.close({ glNumber: this.parentGlNumber, newLedgerName: this.newLedgerName });\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n    <div class=\"loader\">\r\n      <div class=\"spinner-border\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div id=\"navPanel\" class=\"row\">\r\n      <div class=\"navOptions col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-6 ps-0\" style=\"margin-top: 4.25%; border-top: 1px solid #ccc;\">\r\n            <ul class=\"tree\">\r\n              <li>\r\n                <input type=\"checkbox\" id=\"c1\" (click)=\"allCategories()\"/>\r\n                <label class=\"tree_label\" for=\"c1\">Category</label>\r\n                <ul class=\"tree\">\r\n                  <li *ngFor=\"let rootCategory of sideTree\">\r\n                    <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: rootCategory.entry }\"></ng-container>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n\r\n            <ng-template #displayCategoryTemplate let-category=\"category\">\r\n              <li>\r\n                <input type=\"checkbox\" id=\"{{ category.glNumber }}\" (click)=\"toggleNode(category)\" />\r\n                <label class=\"tree_label\" for=\"{{ category.glNumber }}\">{{ category.glName }}</label>\r\n                <ul class=\"tree\">\r\n                  <li *ngFor=\"let childCategory of category.children\">\r\n                    <div *ngIf=\"childCategory.children.length > 0\">\r\n                      <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: childCategory }\"></ng-container>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n            </ng-template>\r\n      </div>\r\n\r\n      <div class=\"col-xxl-10 col-xl-10 col-lg-9 col-md-8 col-sm-6 ps-0\">\r\n          <div class=\"row d-flex flex-center mb-3\">\r\n              <div class=\"col-md-1 col-lg-5 col-xl-6\"></div>\r\n              <div class=\"col-sm-4 col-md-3 col-lg-3 col-xl-3 mt-2\">\r\n                <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n              </div>\r\n              <div class=\"navOption-btns col-sm-8 col-md-8 col-lg-4 col-xl-3 mt-2\"\r\n                  style=\"display:flex;justify-content: space-around !important;align-items: center;\">\r\n                  <button class=\"btn text-nowrap\" type=\"button\" (click)=\"openCutomizeLedger()\"><i class=\"fas fa-plus me-2\"> </i>Customize Your Ledger\r\n                  </button>\r\n                  <!-- <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n                      Preview\r\n                  </button> -->\r\n              </div>\r\n          </div>\r\n\r\n          <!-- <hr class=\"my-0 py-0\" /> -->\r\n          <div style=\"border-left: 2px solid #ccc; overflow-x: auto;\">\r\n            <table class=\"table table-responsive mb-0\">\r\n                <thead class=\"text-600\">\r\n                  <tr>\r\n                    <!-- <th class=\"text-nowrap col-1\" style=\"vertical-align: middle;\">\r\n                      <input type=\"checkbox\" class=\"form-check-input mt-2\" [(ngModel)]=\"selectAllChecked\" (change)=\"toggleSelectAll()\" />\r\n                    </th> -->\r\n                    <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Code</th>\r\n                    <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Ledger</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr class=\"btn-reveal-trigger text-left\" style=\"color: #676398!important;\" [ngStyle]=\"{'background-color': (i % 2 === 0 ? '#ffffff' : '#f2f2f2')}\" *ngFor=\"let child of sideTreeData; let i = index\">\r\n                    <!-- <td scope=\"row\" style=\"vertical-align: middle;\">\r\n                      <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"child.selected\" id=\"{{ child.glNumber }}\" (change)=\"handleCheckboxChange(child)\" />\r\n                    </td> -->\r\n                    <td style=\"vertical-align:middle;\">{{ child.glNumber }}</td>\r\n                    <td style=\"vertical-align:middle;\" for=\"child.glNumber\">{{ child.glName }}</td>\r\n\r\n                  </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n      </div>\r\n  </div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { PreviewComponent } from '../preview/preview.component';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-my-ledger',\r\n  templateUrl: './my-ledger.component.html',\r\n  styleUrls: ['./my-ledger.component.scss']\r\n})\r\nexport class MyLedgerComponent implements OnInit {\r\n\r\n  isLoading: boolean = false;\r\n  searchTerm: string = '';\r\n\r\n  ledgerList: any[] = [  ];\r\n  selectedItems: any[] = []; // Array to store selected items\r\n  selectAllChecked: boolean = false; // Initialize with false\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  categories: any[] = [];\r\n  sideTree: any[];\r\n  sideTreeData: any[] = [];\r\n  masterLedger: any[]= [];\r\n  \r\n  constructor(public dialog: MatDialog, private router: Router,\r\n    private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n    private titleCasePipe: TitleCasePipe) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getUserLedger2().then(() => {\r\n      // console.log(this.sideTreeData)\r\n      this.ledgerService.setLedgerData(this.sideTreeData);\r\n    });\r\n  }\r\n\r\n  // recursive function to get all the childrens and their childrens dynamically\r\n  filterEntriesWithChildren(entries: any[]): any[] {\r\n    return entries.map(entry => {\r\n      this.categories.push(entry)   // adding all the entries one by one into the category array\r\n      const children = entry.children.length > 0 ? this.filterEntriesWithChildren(entry.children) : [];   //calling the same function n times and passing their children as a argument\r\n      return { entry, ...entry.children, children }; // getting the parent entry and children of that entry and grand children as well\r\n    })\r\n  }\r\n\r\n  allCategories(){\r\n    this.sideTreeData = this.categories\r\n  }\r\n  \r\n  async getUserLedger2(): Promise<void> {\r\n    this.isLoading = true;\r\n    try {\r\n      const res = await this.ledgerService.getUserLedger2({}, this.currentUser.id);\r\n      if (res.success) {\r\n        const rawData = res.data;\r\n        console.log(rawData);\r\n        // this.filterChildrenWithEmptyGrandchildren(rawData)\r\n        this.sideTreeData = this.categories;\r\n        // Filter out entries with no children recursively\r\n        const categories = this.filterEntriesWithChildren(rawData);\r\n        console.log(categories);\r\n        this.sideTree = categories;\r\n      }\r\n    } catch (err) {\r\n      if (err.error.status == 404) {\r\n        this.toastService.openErrorSnackBar(err.error.message);\r\n      } else {\r\n        this.toastService.openErrorSnackBar(err.error.message);\r\n      }\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n  \r\n  /// Recursive function to flatten the hierarchical structure\r\n  flattenCategory(category) {\r\n    const result: any[] = [];\r\n\r\n    // Add the current category\r\n    result.push(category);\r\n\r\n    // Recursively add children\r\n    if (category.children && category.children.length > 0) {\r\n      for (const child of category.children) {\r\n        const childData = this.flattenCategory(child);\r\n        result.push(...childData);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toggleNode(category): void {\r\n    this.isLoading = true;\r\n    setTimeout(() => { \r\n      const existingCategory = this.categories.find(c => c.glNumber === category.glNumber);\r\n      \r\n      // if (existingCategory) {\r\n      //   const filteredData = this.filterEntriesWithChildren(existingCategory.children);\r\n      //   // const filteredData = this.filterChildrenWithEmptyGrandchildren(existingCategory.children);\r\n      //   // this.buildSideTreeData(filteredData);\r\n      //   console.log(filteredData);\r\n      //   this.sideTreeData = filteredData;\r\n      // } else {\r\n      //   this.sideTreeData = this.categories;\r\n      // }\r\n      if (existingCategory) {\r\n        const flattenedData = this.flattenCategory(existingCategory);\r\n        console.log(flattenedData);\r\n        this.sideTreeData = flattenedData;\r\n      } else {\r\n        this.sideTreeData = this.categories;\r\n      }\r\n  \r\n      // Update selectedItems and selectAllChecked based on existing selections\r\n      this.updateSelectedItemsAndSelectAll();\r\n  \r\n      this.isLoading = false;\r\n    }, 1000);\r\n  }\r\n\r\n  filterChildrenWithEmptyGrandchildren(children): any[] {\r\n    const filteredChildren = children.filter(child => {\r\n      return child.children.length === 0 || this.hasEmptyGrandchildren(child.children);\r\n    });\r\n  \r\n    const nextLevelChildren = [];\r\n    for (const child of filteredChildren) {\r\n      nextLevelChildren.push(...child.children);\r\n    }\r\n  \r\n    if (nextLevelChildren.length > 0) {\r\n      return this.filterChildrenWithEmptyGrandchildren(nextLevelChildren);\r\n    }\r\n  \r\n    return filteredChildren;\r\n  }\r\n  \r\n  hasEmptyGrandchildren(children): boolean {\r\n    return children.some(grandchild => grandchild.children.length === 0);\r\n  }\r\n\r\n  // Add this function to update selectedItems and selectAllChecked\r\n  updateSelectedItemsAndSelectAll(): void {\r\n    const allSelected = this.sideTreeData.every(item => item.selected);\r\n    const someSelected = this.sideTreeData.some(item => item.selected);\r\n  \r\n    if (allSelected) {\r\n      this.selectAllChecked = true;\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else if (someSelected) {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = this.sideTreeData.filter(item => item.selected);\r\n    } else {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  displayCategory(category): void {\r\n    if (category.children.length === 0) {\r\n      console.log(category.glNumber, category.glName); // Display only if no children\r\n    } else {\r\n      console.log(category.glNumber, category.glName); // Display parent\r\n      for (const child of category.children) {\r\n        this.displayCategory(child); // Recursively display children\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange(item: any): void {\r\n    if (item.selected) {\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      const index = this.selectedItems.indexOf(item);\r\n      if (index !== -1) {\r\n        this.selectedItems.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    this.updateSelectAllCheckedState();\r\n    // Call updateSelectedItemsAndSelectAll to sync with selectAllChecked\r\n    this.updateSelectedItemsAndSelectAll();\r\n  }\r\n\r\n  toggleSelectAll(): void {\r\n    // this.selectAllChecked = !this.selectAllChecked;\r\n    for (const item of this.sideTreeData) {\r\n      item.selected = this.selectAllChecked;\r\n    }\r\n\r\n    // Update the selected items list as well\r\n    if (this.selectAllChecked) {\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  updateSelectAllCheckedState(): void {\r\n    this.selectAllChecked = this.sideTreeData.length > 0 && this.sideTreeData.every(item => item.selected);\r\n  }\r\n\r\n  openPreviewDialog(): void {\r\n    if(this.selectedItems && this.selectedItems.length > 0){\r\n      const dialogRef: MatDialogRef<PreviewComponent> = this.dialog.open(PreviewComponent, {\r\n        width: '800px', // Adjust the width as per your requirement\r\n        height : '100vh',\r\n        data: { \r\n          selectedItems: this.selectedItems,\r\n          allGlData : this.categories \r\n        }, // Pass the selected items to the modal\r\n        panelClass: 'custom-dialog-class',\r\n        disableClose:true,\r\n        position: {\r\n          right: '0',\r\n        },\r\n      });\r\n      \r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(`Dialog result: ${result}`);\r\n      });\r\n    } else {\r\n      this.toastService.openErrorSnackBar(\"There is not selected any ledger. Please select a ledger.\")\r\n    }\r\n  }\r\n\r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n  \r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.sideTreeData = this.categories;\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.sideTreeData = this.categories.filter(item => {\r\n        // Modify the condition as needed for your search criteria\r\n        return item.glNumber.toLowerCase().includes(searchTerm) || item.glName.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n  \r\n  openCutomizeLedger(){\r\n    // this.ledgerService.sharedArray = this.categories; // Set the array in the service\r\n    this.router.navigate(['pages/ledger-page/customize-ledger']);\r\n  }\r\n}\r\n"]}