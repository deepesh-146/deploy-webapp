{"version":3,"file":"src_app_pages_ledger_ledger_module_ts-es2015.js","mappings":"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","sources":["./src/app/core/services/default-page-resolver.service.ts","./src/app/pages/ledger/create-ledger/create-ledger.component.ts","./src/app/pages/ledger/create-ledger/create-ledger.component.html","./src/app/pages/ledger/customize-ledger/customize-ledger.component.ts","./src/app/pages/ledger/customize-ledger/customize-ledger.component.html","./src/app/pages/ledger/ledger-routing.module.ts","./src/app/pages/ledger/ledger-setting/ledger-setting.component.ts","./src/app/pages/ledger/ledger-setting/ledger-setting.component.html","./src/app/pages/ledger/ledger.module.ts","./src/app/pages/ledger/ledger/ledger.component.ts","./src/app/pages/ledger/ledger/ledger.component.html","./src/app/pages/ledger/my-ledger/add-ledger/add-ledger.component.ts","./src/app/pages/ledger/my-ledger/add-ledger/add-ledger.component.html","./src/app/pages/ledger/my-ledger/my-ledger.component.ts","./src/app/pages/ledger/my-ledger/my-ledger.component.html"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\nimport { LedgerServiceService } from './ledger-service.service';\r\nimport { Observable, from } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DefaultPageResolverService implements Resolve<string> {\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  defaultLedgerFlag: boolean;\r\n\r\n  constructor(private ledgerService: LedgerServiceService) { }\r\n\r\n  resolve(): Observable<string> {\r\n    // Call your API to get the masterLedgerTrueFalse value\r\n    const currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n\r\n    return from(this.ledgerService.masterLedgerTrueFalse({}, currentUser.id)).pipe(\r\n      map((res: any) => {\r\n        const masterLedgerTrueFalse = res.data.result; // Assuming 'result' contains the boolean value\r\n        return masterLedgerTrueFalse ? 'master-ledger' : 'create-ledger';\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from \"@angular/material/tree\";\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { PreviewComponent } from '../preview/preview.component';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { AddLedgerComponent } from '../my-ledger/add-ledger/add-ledger.component';\r\n  \r\n@Component({\r\n  selector: 'app-create-ledger',\r\n  templateUrl: './create-ledger.component.html',\r\n  styleUrls: ['./create-ledger.component.scss']\r\n})\r\nexport class CreateLedgerComponent implements OnInit {\r\n  isLoading: boolean = false;\r\n  searchTerm: string = '';\r\n\r\n  ledgerList: any[] = [  ];\r\n  selectedItems: any[] = []; // Array to store selected items\r\n  selectAllChecked: boolean = false; // Initialize with false\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  categories: any[] = [];\r\n  sideTree: any[];\r\n  sideTreeData: any[] = [];\r\n\r\n  constructor(public dialog: MatDialog,\r\n      private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n      private titleCasePipe: TitleCasePipe) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAllGlnames().then(() => {\r\n      // console.log(this.sideTreeData)\r\n      this.ledgerService.setLedgerData(this.sideTreeData);\r\n    });\r\n  }\r\n\r\n  // recursive function to get all the childrens and their childrens dynamically\r\n  filterEntriesWithChildren(entries: any[]): any[] {\r\n    return entries.map(entry => {\r\n      this.categories.push(entry)   // adding all the entries one by one into the category array\r\n      const children = entry.children.length > 0 ? this.filterEntriesWithChildren(entry.children) : [];   //calling the same function n times and passing their children as a argument\r\n      return { entry, ...entry.children, children }; // getting the parent entry and children of that entry and grand children as well\r\n    })\r\n  }\r\n\r\n  allCategories(){\r\n    this.sideTreeData = this.categories\r\n  }\r\n\r\n  // get all the ledger entries structures from backend\r\n  async getAllGlnames(): Promise<void> {\r\n    this.isLoading = true;\r\n    try {\r\n      const res = await this.ledgerService.getAllGlnames({}, this.currentUser.id);\r\n      if (res.success) {\r\n        const rawData = res.data;\r\n        console.log(rawData);\r\n        // this.filterChildrenWithEmptyGrandchildren(rawData)\r\n        this.sideTreeData = this.categories;\r\n        // Filter out entries with no children recursively\r\n        const categories = this.filterEntriesWithChildren(rawData);\r\n        console.log(categories);\r\n        this.sideTree = categories;\r\n        // const categories = this.filterEntriesWithChildren(rawData);\r\n        // this.sideTreeData = categories;\r\n        // let flattenedData = this.flattenCategory(categories);\r\n        // console.log(flattenedData);\r\n        // this.sideTreeData = flattenedData;\r\n        // this.sideTree = this.extractChildren(rawData);\r\n        // rawData.forEach((entry) => {\r\n        //   console.log(entry)\r\n        //   this.sideTree.push(...this.extractChildren(entry));\r\n        // });\r\n        // console.log(this.sideTree)\r\n      }\r\n    } catch (err) {\r\n      // if (err.error.status == 404) {\r\n      //   this.toastService.openErrorSnackBar(err.error.message);\r\n      // } else {\r\n        this.toastService.toastMsg({\r\n          title: \"Error\",\r\n          content: err,\r\n          });\r\n        // this.toastService.openErrorSnackBar(err);\r\n      // }\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  /// Recursive function to flatten the hierarchical structure\r\n  flattenCategory(category) {\r\n    const result: any[] = [];\r\n\r\n    // Add the current category\r\n    result.push(category);\r\n\r\n    // Recursively add children\r\n    if (category.children && category.children.length > 0) {\r\n      for (const child of category.children) {\r\n        const childData = this.flattenCategory(child);\r\n        result.push(...childData);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toggleNode(category): void {\r\n    this.isLoading = true;\r\n    setTimeout(() => { \r\n      const existingCategory = this.categories.find(c => c.glNumber === category.glNumber);\r\n      \r\n      // if (existingCategory) {\r\n      //   const filteredData = this.filterChildrenWithEmptyGrandchildren(existingCategory.children);\r\n      //   this.sideTreeData = filteredData;\r\n      // } else {\r\n      //   this.sideTreeData = this.categories;\r\n      // }\r\n      if (existingCategory) {\r\n        const flattenedData = this.flattenCategory(existingCategory);\r\n        console.log(flattenedData);\r\n        this.sideTreeData = flattenedData;\r\n      } else {\r\n        this.sideTreeData = this.categories;\r\n      }\r\n  \r\n      // Update selectedItems and selectAllChecked based on existing selections\r\n      this.updateSelectedItemsAndSelectAll();\r\n  \r\n      this.isLoading = false;\r\n    }, 1000);\r\n  }\r\n\r\n  filterChildrenWithEmptyGrandchildren(children): any[] {\r\n    const filteredChildren = children.filter(child => {\r\n      return child.children.length === 0 || this.hasEmptyGrandchildren(child.children);\r\n    });\r\n  \r\n    const nextLevelChildren = [];\r\n    for (const child of filteredChildren) {\r\n      nextLevelChildren.push(...child.children);\r\n    }\r\n  \r\n    if (nextLevelChildren.length > 0) {\r\n      return this.filterChildrenWithEmptyGrandchildren(nextLevelChildren);\r\n    }\r\n  \r\n    return filteredChildren;\r\n  }\r\n  \r\n  hasEmptyGrandchildren(children): boolean {\r\n    return children.some(grandchild => grandchild.children.length === 0);\r\n  }\r\n\r\n  // Add this function to update selectedItems and selectAllChecked\r\n  updateSelectedItemsAndSelectAll(): void {\r\n    const allSelected = this.sideTreeData.every(item => item.selected);\r\n    const someSelected = this.sideTreeData.some(item => item.selected);\r\n  \r\n    if (allSelected) {\r\n      this.selectAllChecked = true;\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else if (someSelected) {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = this.sideTreeData.filter(item => item.selected);\r\n    } else {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  displayCategory(category): void {\r\n    if (category.children.length === 0) {\r\n      console.log(category.glNumber, category.glName); // Display only if no children\r\n    } else {\r\n      console.log(category.glNumber, category.glName); // Display parent\r\n      for (const child of category.children) {\r\n        this.displayCategory(child); // Recursively display children\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange(item: any): void {\r\n    if (item.selected) {\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      const index = this.selectedItems.indexOf(item);\r\n      if (index !== -1) {\r\n        this.selectedItems.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    this.updateSelectAllCheckedState();\r\n    // Call updateSelectedItemsAndSelectAll to sync with selectAllChecked\r\n    this.updateSelectedItemsAndSelectAll();\r\n  }\r\n\r\n  toggleSelectAll(): void {\r\n    // this.selectAllChecked = !this.selectAllChecked;\r\n    for (const item of this.sideTreeData) {\r\n      item.selected = this.selectAllChecked;\r\n    }\r\n\r\n    // Update the selected items list as well\r\n    if (this.selectAllChecked) {\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  updateSelectAllCheckedState(): void {\r\n    this.selectAllChecked = this.sideTreeData.length > 0 && this.sideTreeData.every(item => item.selected);\r\n  }\r\n\r\n  openPreviewDialog(): void {\r\n    if(this.selectedItems && this.selectedItems.length > 0){\r\n      const dialogRef: MatDialogRef<PreviewComponent> = this.dialog.open(PreviewComponent, {\r\n        width: '800px', // Adjust the width as per your requirement\r\n        height : '100vh',\r\n        data: { \r\n          selectedItems: this.selectedItems,\r\n          allGlData : this.categories \r\n        }, // Pass the selected items to the modal\r\n        panelClass: 'custom-dialog-class',\r\n        disableClose:true,\r\n        position: {\r\n          right: '0',\r\n        },\r\n      });\r\n      \r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(`Dialog result: ${result}`);\r\n      });\r\n    } else {\r\n      this.toastService.toastMsg({\r\n        title: \"Error\",\r\n        content: \"There Is Not Selected Any Ledger. Please Select A Ledger.\",\r\n        });\r\n      // this.toastService.openErrorSnackBar(\"There is not selected any ledger. Please select a ledger.\")\r\n    }\r\n  }\r\n\r\n  openAddLedgerModal(glNumber: string, glName: string): void {\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { glNumber, glName } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  openCreateLedgerModal(): void {\r\n    const createLedger = true\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { createLedger } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n  \r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.sideTreeData = this.categories;\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.sideTreeData = this.categories.filter(item => {\r\n        // Modify the condition as needed for your search criteria\r\n        return item.glNumber.toLowerCase().includes(searchTerm) || item.glName.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n  <div class=\"loader\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Suggestion ==> Search bar and buttons should be here. -->\r\n<!-- <div class=\"row headerButtons mb-3\" id=\"showoptionHide\">\r\n  <div class=\"flex-item searchBar\">\r\n    <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5 my-2\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n  </div>\r\n  <div class=\"navOption-btns flex-item formButtons mx-0\">\r\n    <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n      Preview\r\n    </button>\r\n  </div>\r\n</div> -->\r\n\r\n\r\n<div id=\"navPanel\" class=\"row\">\r\n    <div class=\"navOptions col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-6 ps-0\" style=\"margin-top: 4.25%; border-top: 1px solid #ccc;\">\r\n          <ul class=\"tree\">\r\n            <li>\r\n              <input type=\"checkbox\" id=\"c1\" (click)=\"allCategories()\"/>\r\n              <label class=\"tree_label\" for=\"c1\">Category</label>\r\n              <ul class=\"tree\">\r\n                <li *ngFor=\"let rootCategory of sideTree\">\r\n                  <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: rootCategory.entry }\"></ng-container>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n\r\n          <ng-template #displayCategoryTemplate let-category=\"category\">\r\n            <li>\r\n              <input type=\"checkbox\" id=\"{{ category.glNumber }}\" (click)=\"toggleNode(category)\" />\r\n              <label class=\"tree_label\" for=\"{{ category.glNumber }}\">{{ category.glName }}</label>\r\n              <ul class=\"tree\">\r\n                <li *ngFor=\"let childCategory of category.children\">\r\n                  <div *ngIf=\"childCategory.children.length > 0\">\r\n                    <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: childCategory }\"></ng-container>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ng-template>\r\n    </div>\r\n\r\n    <div class=\"col-xxl-10 col-xl-10 col-lg-9 col-md-8 col-sm-6 ps-0\">\r\n\r\n        <!-- <div class=\"row d-flex flex-center mb-3\">\r\n            <div class=\"col-md-1 col-lg-5 col-xl-6\"></div>\r\n            <div class=\"col-sm-4 col-md-3 col-lg-3 col-xl-3 mt-2\">\r\n              <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n            </div>\r\n            <div class=\"navOption-btns col-sm-8 col-md-8 col-lg-4 col-xl-3 mt-2\"\r\n                style=\"display:flex;justify-content: space-around !important;align-items: center;\">\r\n                <button class=\"btn text-nowrap\" type=\"button\" (click)=\"openCreateLedgerModal()\"><i class=\"fas fa-plus me-2\"> </i>Add New Ledger\r\n                </button>\r\n                <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n                    Preview\r\n                </button>\r\n            </div>\r\n        </div> -->\r\n\r\n        <div class=\"row headerButtons mb-3\" id=\"showoptionHide\">\r\n          <div class=\"flex-item searchBar\">\r\n            <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5 my-2\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n          </div>\r\n          <div class=\"navOption-btns flex-item formButtons mx-0\">\r\n            <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n              Preview\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- <hr class=\"my-0 py-0\" /> -->\r\n        <div style=\"border-left: 2px solid #ccc; overflow-x: auto;\">\r\n          <table class=\"table table-responsive mb-0\">\r\n              <thead class=\"text-600\">\r\n                <tr>\r\n                  <th class=\"text-nowrap col-1\" style=\"vertical-align: middle;\">\r\n                    <input type=\"checkbox\" class=\"form-check-input mt-2\" [(ngModel)]=\"selectAllChecked\" (change)=\"toggleSelectAll()\" />\r\n                  </th>\r\n                  <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Code</th>\r\n                  <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Ledger</th>\r\n                  <!-- <th class=\"text-nowrap\" style=\"vertical-align: middle;\"></th> -->\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr class=\"btn-reveal-trigger text-left\" style=\"color: #676398!important;\" [ngStyle]=\"{'background-color': (i % 2 === 0 ? '#ffffff' : '#f2f2f2')}\" *ngFor=\"let child of sideTreeData; let i = index\">\r\n                  <td scope=\"row\" style=\"vertical-align: middle;\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"child.selected\" id=\"{{ child.glNumber }}\" (change)=\"handleCheckboxChange(child)\" />\r\n                  </td>\r\n                  <td style=\"vertical-align:middle;\">{{ child.glNumber }}</td>\r\n                  <td style=\"vertical-align:middle;\" for=\"child.glNumber\">{{ child.glName }}</td>\r\n                  <!-- <td *ngIf=\"child.children.length === 0\">\r\n                    <button class=\"btn\" (click)=\"openAddLedgerModal(child.glNumber, child.glName)\" style=\"color: #FC7643;\">\r\n                      <i class=\"fas fa-plus\"></i>\r\n                    </button>\r\n                  </td> -->\r\n                </tr>\r\n              </tbody>\r\n          </table>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n","import { ChangeDetectorRef, Component, OnInit, NgZone, ChangeDetectionStrategy, ViewChild, ElementRef, Renderer2 } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { PreviewComponent } from '../preview/preview.component';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { AddLedgerComponent } from '../my-ledger/add-ledger/add-ledger.component';\r\n\r\n@Component({\r\n  selector: 'app-customize-ledger',\r\n  templateUrl: './customize-ledger.component.html',\r\n  styleUrls: ['./customize-ledger.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomizeLedgerComponent implements OnInit {\r\n  @ViewChild('myButtonCustomize') myButton: ElementRef;\r\n  searchTerm: string = '';\r\n\r\n  isLoading: boolean = false;\r\n  isDisabled: boolean = false;\r\n  ledgerList: any[] = [];\r\n  selectedItems: any[] = []; // Array to store selected items\r\n  selectAllChecked: boolean = false; // Initialize with false\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  categories: any[] = [];\r\n  sideTree: any[];\r\n  sideTreeData: any[] = [];\r\n  masterLedger: any[] = [];\r\n  preSelectedEntries: any[] = []; // Initialize with the entries you want to pre-select\r\n\r\n  constructor(public dialog: MatDialog, private router: Router, private cdr: ChangeDetectorRef,\r\n    private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n    private titleCasePipe: TitleCasePipe, private ngZone: NgZone,\r\n    private renderer: Renderer2) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getAllGlnames()\r\n  }\r\n\r\n  // recursive function to get all the childrens and their childrens dynamically\r\n  filterEntriesWithChildren(entries: any[]): any[] {\r\n    return entries.map(entry => {\r\n      this.categories.push(entry)   // adding all the entries one by one into the category array\r\n      const children = entry.children.length > 0 ? this.filterEntriesWithChildren(entry.children) : [];   //calling the same function n times and passing their children as a argument\r\n      return { entry, ...entry.children, children }; // getting the parent entry and children of that entry and grand children as well\r\n    })\r\n  }\r\n\r\n  allCategories() {\r\n    console.log('allCategories')\r\n    this.sideTreeData = this.categories\r\n    this.sideTreeData.forEach(item => {\r\n      if (item.gl_flag === true) {\r\n        item.selected = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  // get all the ledger entries structures from backend\r\n  getAllGlnames() {\r\n    try {\r\n      this.isLoading = true;\r\n      this.ledgerService.getAllGlnames({}, this.currentUser.id)\r\n        .then((res) => {\r\n          if (res.success) {\r\n            const rawData = res.data;\r\n\r\n            // Pre-select entries with gl_flag === true\r\n            rawData.forEach(entry => {\r\n              if (entry.gl_flag) {\r\n                entry.selected = true;\r\n              }\r\n            });\r\n\r\n            const categories = this.filterEntriesWithChildren(rawData);\r\n\r\n            this.sideTree = categories;\r\n            console.log(this.sideTree);\r\n            this.isLoading = false;\r\n            this.cdr.markForCheck();\r\n            this.renderer.selectRootElement(this.myButton.nativeElement).click();\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.ngZone.run(() => {\r\n            this.isLoading = false;\r\n            this.cdr.markForCheck();\r\n            this.toastService.toastMsg({\r\n              title: \"Error\",\r\n              content: \"An Error Occurred\",\r\n              });\r\n            // this.toastService.openErrorSnackBar(\"An error occurred\");\r\n          });\r\n        })\r\n        .finally(() => {\r\n          this.isLoading = false;\r\n          this.cdr.markForCheck();\r\n        });\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  }\r\n\r\n  /// Recursive function to flatten the hierarchical structure\r\n  flattenCategory(category) {\r\n    const result: any[] = [];\r\n\r\n    // Add the current category\r\n    result.push(category);\r\n\r\n    // Recursively add children\r\n    if (category.children && category.children.length > 0) {\r\n      for (const child of category.children) {\r\n        const childData = this.flattenCategory(child);\r\n        result.push(...childData);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toggleNode(category): void {\r\n    this.isLoading = true;\r\n      // console.log(category)\r\n      const existingCategory = this.categories.find(c => c.glNumber === category.glNumber);\r\n\r\n      if (existingCategory) {\r\n        const flattenedData = this.flattenCategory(existingCategory);\r\n        console.log(flattenedData);\r\n        this.sideTreeData = flattenedData;\r\n      } else {\r\n        this.sideTreeData = this.categories;\r\n      }\r\n\r\n\r\n      this.sideTreeData.forEach(item => {\r\n        if (item.gl_flag === true) {\r\n          item.selected = true;\r\n        }\r\n      });\r\n      // Update selectedItems and selectAllChecked based on existing selections\r\n      this.updateSelectedItemsAndSelectAll();\r\n\r\n      this.isLoading = false;\r\n      this.cdr.markForCheck();\r\n  }\r\n\r\n  // filterChildrenWithEmptyGrandchildren(children): any[] {\r\n  //   const filteredChildren = children.filter(child => {\r\n  //     return child.children.length === 0 || this.hasEmptyGrandchildren(child.children);\r\n  //   });\r\n\r\n  //   const nextLevelChildren = [];\r\n  //   for (const child of filteredChildren) {\r\n  //     nextLevelChildren.push(...child.children);\r\n  //   }\r\n\r\n  //   if (nextLevelChildren.length > 0) {\r\n  //     return this.filterChildrenWithEmptyGrandchildren(nextLevelChildren);\r\n  //   }\r\n\r\n  //   return filteredChildren;\r\n  // }\r\n\r\n  hasEmptyGrandchildren(children): boolean {\r\n    return children.some(grandchild => grandchild.children.length === 0);\r\n  }\r\n\r\n  // Add this function to update selectedItems and selectAllChecked\r\n  updateSelectedItemsAndSelectAll(): void {\r\n    const allSelected = this.sideTreeData.every(item => item.selected);\r\n    const someSelected = this.sideTreeData.some(item => item.selected);\r\n\r\n    if (allSelected) {\r\n      this.selectAllChecked = true;\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else if (someSelected) {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = this.sideTreeData.filter(item => item.selected);\r\n    } else {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  displayCategory(category): void {\r\n    if (category.children.length === 0) {\r\n      console.log(category.glNumber, category.glName); // Display only if no children\r\n    } else {\r\n      console.log(category.glNumber, category.glName); // Display parent\r\n      for (const child of category.children) {\r\n        this.displayCategory(child); // Recursively display children\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange(item: any): void {\r\n\r\n    if (item.selected) {\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      const index = this.selectedItems.indexOf(item);\r\n      if (index !== -1) {\r\n        this.selectedItems.splice(index, 1);\r\n      }\r\n    }\r\n    this.updateSelectAllCheckedState();\r\n    // Call updateSelectedItemsAndSelectAll to sync with selectAllChecked\r\n    this.updateSelectedItemsAndSelectAll();\r\n  }\r\n\r\n  toggleSelectAll(): void {\r\n    // this.selectAllChecked = !this.selectAllChecked;\r\n    for (const item of this.sideTreeData) {\r\n      item.selected = this.selectAllChecked;\r\n    }\r\n\r\n    // Update the selected items list as well\r\n    if (this.selectAllChecked) {\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  updateSelectAllCheckedState(): void {\r\n    this.selectAllChecked = this.sideTreeData.length > 0 && this.sideTreeData.every(item => item.selected);\r\n  }\r\n\r\n  openAddLedgerModal(glNumber: string, glName: string): void {\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { glNumber, glName } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  openCreateLedgerModal(): void {\r\n    const createLedger = true\r\n    const dialogRef = this.dialog.open(AddLedgerComponent, {\r\n      width: '400px', // Set the desired width\r\n      data: { createLedger } // Pass data to the modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Process the newLedger data, update your sideTreeData, etc.\r\n      }\r\n    });\r\n  }\r\n\r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n\r\n\r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.sideTreeData = this.categories;\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.sideTreeData = this.categories.filter(item => {\r\n        // Modify the condition as needed for your search criteria\r\n        return item.glNumber.toLowerCase().includes(searchTerm) || item.glName.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n  <div class=\"loader\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div id=\"navPanel\" class=\"row\">\r\n  <div class=\"navOptions col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-6 ps-0\"\r\n    style=\"margin-top: 4.25%; border-top: 1px solid #ccc;\">\r\n    <ul class=\"tree\">\r\n      <li>\r\n        <input type=\"checkbox\" #myButtonCustomize id=\"c1\" (click)=\"allCategories()\" />\r\n        <label class=\"tree_label\" for=\"c1\">Category</label>\r\n        <ul class=\"tree\">\r\n          <li *ngFor=\"let rootCategory of sideTree\">\r\n            <ng-container\r\n              *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: rootCategory.entry }\"></ng-container>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n\r\n    <ng-template #displayCategoryTemplate let-category=\"category\">\r\n      <li>\r\n        <input type=\"checkbox\" id=\"{{ category.glNumber }}\" (click)=\"toggleNode(category)\" />\r\n        <label class=\"tree_label\" for=\"{{ category.glNumber }}\">{{ category.glName }}</label>\r\n        <ul class=\"tree\">\r\n          <li *ngFor=\"let childCategory of category.children\">\r\n            <div *ngIf=\"childCategory.children.length > 0\">\r\n              <ng-container\r\n                *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: childCategory }\"></ng-container>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"col-xxl-10 col-xl-10 col-lg-9 col-md-8 col-sm-6 ps-0\">\r\n    <div class=\"row d-flex flex-center mb-3\">\r\n      <div class=\"col-md-1 col-lg-5 col-xl-6\"></div>\r\n      <div class=\"col-sm-4 col-md-3 col-lg-3 col-xl-3 mt-2\">\r\n        <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\"\r\n          (ngModelChange)=\"filterData()\" />\r\n      </div>\r\n      <div class=\"navOption-btns col-sm-8 col-md-8 col-lg-4 col-xl-3 mt-2\"\r\n        style=\"display:flex;justify-content: space-around !important;align-items: center;\">\r\n        <button class=\"btn text-nowrap\" type=\"button\" (click)=\"openCreateLedgerModal()\"><i class=\"fas fa-plus me-2\">\r\n          </i>Add New Ledger\r\n        </button>\r\n        <!-- <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n                      Preview\r\n                  </button> -->\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <hr class=\"my-0 py-0\" /> -->\r\n    <div style=\"border-left: 2px solid #ccc; overflow-x: auto;\">\r\n      <table class=\"table table-responsive mb-0\">\r\n        <thead class=\"text-600\">\r\n          <tr>\r\n            <th class=\"text-nowrap col-1\" style=\"vertical-align: middle;\">\r\n              <input type=\"checkbox\" class=\"form-check-input mt-2\" [(ngModel)]=\"selectAllChecked\"\r\n                (change)=\"toggleSelectAll()\" />\r\n            </th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Code</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Ledger</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align: middle;\"></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr class=\"btn-reveal-trigger text-left\" style=\"color: #676398!important;\"\r\n            [ngStyle]=\"{'background-color': (i % 2 === 0 ? '#ffffff' : '#f2f2f2')}\"\r\n            *ngFor=\"let child of sideTreeData; let i = index\">\r\n            <td scope=\"row\" style=\"vertical-align: middle;\" *ngIf=\"child.children.length === 0\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"child.selected\" id=\"{{ child.glNumber }}\"\r\n                (change)=\"handleCheckboxChange(child)\" [checked]=\"child.gl_flag\" [disabled]=\"child.gl_flag\"/>\r\n            </td>\r\n            <td style=\"vertical-align:middle;\" *ngIf=\"child.children.length === 0\">{{ child.glNumber }}</td>\r\n            <td style=\"vertical-align:middle;\" *ngIf=\"child.children.length === 0\" for=\"child.glNumber\">{{ child.glName\r\n              }}</td>\r\n            <td *ngIf=\"child.children.length === 0\">\r\n              <button class=\"btn\" (click)=\"openAddLedgerModal(child.glNumber, child.glName)\" style=\"color: #FC7643;\">\r\n                <i class=\"fas fa-plus\"></i>\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LedgerComponent } from './ledger/ledger.component';\r\nimport { CreateLedgerComponent } from './create-ledger/create-ledger.component';\r\nimport { MyLedgerComponent } from './my-ledger/my-ledger.component';\r\nimport { LedgerSettingComponent } from './ledger-setting/ledger-setting.component';\r\nimport { DefaultPageResolverService } from 'src/app/core/services/default-page-resolver.service';\r\nimport { CustomizeLedgerComponent } from './customize-ledger/customize-ledger.component';\r\n\r\nconst routes: Routes = [\r\n  { \r\n    path: '',\r\n    component : LedgerComponent,\r\n    resolve: {\r\n      defaultPage: DefaultPageResolverService, // Use the resolver here\r\n    },\r\n    children : [\r\n      { \r\n        path: '', \r\n        redirectTo: 'master-ledger',\r\n        pathMatch: 'full'\r\n      },\r\n      { \r\n        path: 'create-ledger', \r\n        component: CreateLedgerComponent\r\n      },\r\n      { \r\n        path: 'master-ledger', \r\n        component: MyLedgerComponent\r\n      },\r\n      { \r\n        path: 'ledger-setting', \r\n        component: LedgerSettingComponent\r\n      },\r\n      { \r\n        path: 'customize-ledger',  \r\n        component: CustomizeLedgerComponent\r\n      },\r\n    ],\r\n    pathMatch: 'prefix',\r\n    data: {\r\n      routerLinkActiveOptions: { exact: true, pathMatch: 'full' }\r\n    }\r\n  },\r\n  \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LedgerRoutingModule { }\r\n","import { TitleCasePipe } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\n\r\n@Component({\r\n  selector: 'app-ledger-setting',\r\n  templateUrl: './ledger-setting.component.html',\r\n  styleUrls: ['./ledger-setting.component.scss']\r\n})\r\nexport class LedgerSettingComponent implements OnInit {\r\n\r\n  searchTerm: string = '';\r\n  ledgerSettingDisplayList : any[] = []\r\n  updatedLedgerData: any[] = [];\r\n  isLoading: boolean = false;\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n\r\n  ledgerSettingList =  [];\r\n  selectedGlNumber: string; // Property to store the selected glNumber\r\n  filteredLedgerData: any[] = []; // Property to store the filtered ledger data\r\n  selectedValues: any[] = [];\r\n  selectedEntry: any;\r\n  glList: any[];\r\n\r\n  constructor(private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n    private titleCasePipe: TitleCasePipe, private cdr: ChangeDetectorRef,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getLedgerData();\r\n  }\r\n  \r\n  async getLedgerData(): Promise<void> {\r\n    try {\r\n      this.isLoading = true;\r\n      const [userData, childLedgerData] = await Promise.all([\r\n        this.ledgerService.getUserUsecaseData({}, this.currentUser.id),\r\n        this.ledgerService.getUserChildLedger({}, this.currentUser.id)\r\n      ]);\r\n\r\n      this.ledgerSettingDisplayList = userData.data;\r\n      this.filteredLedgerData = childLedgerData.data;\r\n\r\n      // Initialize selectedValues based on ledgerSettingDisplayList\r\n      this.selectedValues = this.ledgerSettingDisplayList.map((item: any) => ({\r\n        debit_gl: item.usercaseData.debit_gl,\r\n        credit_gl: item.usercaseData.credit_gl,\r\n      }))\r\n      // Filter the filteredLedgerData array to exclude selected values\r\n      // this.glList = this.filteredLedgerData.filter(entry => {\r\n      //   const isDebitSelected = this.selectedValues.some(selected => selected.debit_gl === entry.glNumber);\r\n      //   const isCreditSelected = this.selectedValues.some(selected => selected.credit_gl === entry.glNumber);\r\n\r\n      //   // Exclude entries that are selected as debit or credit\r\n      //   return !isDebitSelected && !isCreditSelected;\r\n      // });\r\n      // Create a set to store the selected GLs (both debit and credit)\r\n      //   const selectedGLs = new Set<string>();\r\n      //   this.selectedValues.forEach((value) => {\r\n      //     if (value.debit_gl) {\r\n      //       selectedGLs.add(value.debit_gl);\r\n      //     }\r\n      //     if (value.credit_gl) {\r\n      //       selectedGLs.add(value.credit_gl);\r\n      //     }\r\n      //   });\r\n\r\n      // // Filter the glList to exclude selected values\r\n      // this.glList = this.filteredLedgerData.filter((entry) => !selectedGLs.has(entry.glNumber));\r\n      // console.log(this.glList)\r\n      this.isLoading = false;\r\n      this.cdr.markForCheck();\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      }\r\n  }\r\n\r\n  // Function to update selected values when a user makes a selection\r\n  // async updateSelectedValues(index: number): Promise<void> {\r\n  //   try {\r\n  //     this.selectedEntry = this.ledgerSettingDisplayList[index];\r\n\r\n  //     // Create a new object with the updated usercaseData\r\n  //     const updatedUsercaseData = {\r\n  //       credit_gl: this.selectedValues[index].credit_gl,\r\n  //       debit_gl: this.selectedValues[index].debit_gl,\r\n  //       userCaseId: this.selectedEntry.usercaseData.userCaseId,\r\n  //       _id: this.selectedEntry.usercaseData._id,\r\n  //     };\r\n  //     // Call the API with the updated values\r\n  //     const updatedData = {\r\n  //       userId : this.currentUser.id,\r\n  //       usecaseId: this.selectedEntry.usecaseId,\r\n  //       usecase: this.selectedEntry.usecase,\r\n  //       usercaseData: updatedUsercaseData,\r\n  //       // usercaseData: this.selectedValues[index],\r\n  //     };\r\n  //     console.log(updatedData)\r\n  //     const res = await this.ledgerService.assignLedgersv2(updatedData, this.currentUser.id);\r\n  //     console.log('API response:', res.data);\r\n  //   } catch (error) {\r\n  //     console.error('API error:', error);\r\n  //   }\r\n  // }\r\n  \r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n  \r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.getLedgerData();\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.ledgerSettingDisplayList = this.ledgerSettingDisplayList.filter(item => {\r\n        return item.usecase.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n\r\n  saveRow(index: number): void {\r\n    const selectedEntry = this.ledgerSettingDisplayList[index];\r\n  \r\n    const updatedUsercaseData = {\r\n      credit_gl: this.selectedValues[index].credit_gl,\r\n      debit_gl: this.selectedValues[index].debit_gl,\r\n      userCaseId: selectedEntry.usercaseData.userCaseId,\r\n      _id: selectedEntry.usercaseData._id,\r\n    };\r\n  \r\n    // Check if the data is already in updatedLedgerData array, if not, add it\r\n    const existingDataIndex = this.updatedLedgerData.findIndex(\r\n      (data) => data.userCaseId === updatedUsercaseData.userCaseId\r\n    );\r\n  \r\n    if (existingDataIndex === -1) {\r\n      this.updatedLedgerData.push(updatedUsercaseData);\r\n    } else {\r\n      // If the data already exists, update it\r\n      this.updatedLedgerData[existingDataIndex] = updatedUsercaseData;\r\n    }\r\n  }\r\n  \r\n  async saveAll(): Promise<void> {\r\n    try {\r\n      // Create the final payload with all updated data\r\n      const finalPayload = {\r\n        userId: this.currentUser.id,\r\n        data: this.updatedLedgerData,\r\n      };\r\n  \r\n      console.log(finalPayload);\r\n  \r\n      // Call the API with the final payload\r\n      const res = await this.ledgerService.assignLedgersv2(finalPayload, this.currentUser.id).then((res) => {\r\n        if(res.success){\r\n          console.log('API response:', res.data);\r\n          this.updatedLedgerData = []; // make sure to empty the array after updating the ledger data\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.error('API error:', error);\r\n    }\r\n  }\r\n  \r\n}\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n  <div class=\"loader\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row headerButtons mb-3\" id=\"showoptionHide\">\r\n  <div class=\"flex-item searchBar me-4\">\r\n    <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5 my-2\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n  </div>\r\n</div>\r\n\r\n<!-- <hr class=\"mb-1\"> -->\r\n\r\n<div style = \"width: 100%;overflow-x: auto;\">\r\n\r\n  <table class=\"table table-responsive table-bordered fs--1 mb-0\">\r\n\r\n    <thead class=\"text-600\">\r\n        <tr>\r\n\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:100px;\">SR.NO.</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:auto;\">Ledger Name</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:10%;text-align: center;\">Debit GL</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:10%;text-align: center;\">Credit GL</th>\r\n            <th class=\"text-nowrap\" style=\"vertical-align:middle;width:200px;text-align: center;\">\r\n              <button class=\"btn-save\" (click)=\"saveAll()\" *ngIf=\"updatedLedgerData.length > 0\">Save</button>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        <tr class=\"btn-reveal-trigger text-left\" *ngFor=\"let item of ledgerSettingDisplayList; let i = index\">\r\n            <td style=\"vertical-align:middle;\">{{item.usecaseId}}</td>\r\n            <td class = \"text-nowrap\" style=\"vertical-align:middle;\">{{item.usecase}}</td>\r\n            <td style=\"vertical-align:middle;text-align: center;\">\r\n              <mat-form-field appearance=\"outline\" style=\"width: 80%;\">\r\n                <mat-select [(ngModel)]=\"selectedValues[i].debit_gl\" (ngModelChange)=\"saveRow(i)\">\r\n                  <mat-option *ngFor=\"let entry of filteredLedgerData\" [value]=\"entry.glNumber\">\r\n                    {{ entry.glNumber }}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </td>\r\n            <td style=\"vertical-align:middle;text-align: center;\">\r\n              <mat-form-field appearance=\"outline\" style=\"width: 80%;\">\r\n                <mat-select [(ngModel)]=\"selectedValues[i].credit_gl\" (ngModelChange)=\"saveRow(i)\">\r\n                  <mat-option *ngFor=\"let entry of filteredLedgerData\" [value]=\"entry.glNumber\">\r\n                    {{ entry.glNumber }}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </td>\r\n            <td></td>\r\n        </tr>\r\n    </tbody>\r\n\r\n    <tbody *ngIf=\"ledgerSettingDisplayList.length <= 0\">\r\n      <tr class=\"text-center\">\r\n          <td colspan=\"10\">\r\n              <img class=\"image-responsive\" src=\"../../../assets/img/icons/spot-illustrations/notfound1.png\"\r\n                  alt=\"notfound1\" width=\"200\" height=\"150\" />\r\n          </td>\r\n      </tr>\r\n    </tbody>\r\n\r\n  </table>\r\n\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LedgerRoutingModule } from './ledger-routing.module';\r\nimport { LedgerComponent } from './ledger/ledger.component';\r\nimport { CreateLedgerComponent } from './create-ledger/create-ledger.component';\r\nimport { MyLedgerComponent } from './my-ledger/my-ledger.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MaterialExampleModule } from 'src/app/material.module';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { PreviewComponent } from './preview/preview.component';\r\nimport { AddLedgerComponent } from './my-ledger/add-ledger/add-ledger.component';\r\nimport { LedgerSettingComponent } from './ledger-setting/ledger-setting.component';\r\nimport { CustomizeLedgerComponent } from './customize-ledger/customize-ledger.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LedgerComponent,\r\n    CreateLedgerComponent,\r\n    MyLedgerComponent,\r\n    PreviewComponent,\r\n    AddLedgerComponent,\r\n    LedgerSettingComponent,\r\n    CustomizeLedgerComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LedgerRoutingModule,\r\n    MatIconModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MaterialExampleModule,\r\n    MatTreeModule,\r\n  ]\r\n})\r\nexport class LedgerModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\n\r\n@Component({\r\n  selector: 'app-ledger',\r\n  templateUrl: './ledger.component.html',\r\n  styleUrls: ['./ledger.component.scss']\r\n})\r\n\r\nexport class LedgerComponent implements OnInit {\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  defaultLedgerFlag: boolean;\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router, private ledgerService : LedgerServiceService) {}\r\n  \r\n  ngOnInit(): void {\r\n    /// Access the resolved data\r\n    const defaultPage: string = this.route.snapshot.data.defaultPage;\r\n\r\n    // this.router.navigate([defaultPage], { relativeTo: this.route });\r\n    \r\n    // Use the resolved defaultPage to navigate\r\n    // Use a condition to navigate to the appropriate default page\r\n    if (defaultPage === 'create-ledger') {\r\n      this.router.navigate(['create-ledger'], { relativeTo: this.route });\r\n      this.defaultLedgerFlag = false\r\n    } else {\r\n      this.defaultLedgerFlag = true\r\n      this.router.navigate(['master-ledger'], { relativeTo: this.route });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"component-container container-fluid p-4 bg-white\">\r\n    <div id=\"navPanel\" class=\"row\">\r\n        <div class=\"navOptions col-xxl-6 col-xl-6 col-lg-12 col-md-12 col-sm-12\">\r\n            <div class=\"row page-nav-link mt-3\">\r\n                <div class=\"col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-7 links\" [hidden]=\"defaultLedgerFlag\">\r\n                    <a class=\"mt-3 pb-1 ps-1 text-nowrap\" routerLink=\"./create-ledger\" routerLinkActive=\"active\">Create\r\n                        Your Ledger</a>\r\n                </div>\r\n                <div class=\"col-xxl-1 col-xl-1 col-lg-2 col-md-3 col-sm-5 links\"[hidden]=\"!defaultLedgerFlag\">\r\n                    <a class=\"mt-3 pb-1 ps-1 text-nowrap\" routerLink=\"./master-ledger\" routerLinkActive=\"active\">Master\r\n                        Ledger</a>\r\n                </div>\r\n                <div class=\"col-xxl-1 col-xl-1 col-lg-2 col-md-3 col-sm-5 links\">\r\n                    <a class=\"mt-3 pb-1 ps-1 text-nowrap\" routerLink=\"./ledger-setting\" routerLinkActive=\"active\">Ledger Setting</a>\r\n                </div>\r\n                <div class=\"col-lg-3\"></div>\r\n            </div>\r\n    </div>\r\n    <hr class=\"mt-1\">\r\n    \r\n    <div class=\"component-container container-fluid\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n    \r\n</div>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\n\r\n@Component({\r\n  selector: 'app-add-ledger',\r\n  templateUrl: './add-ledger.component.html',\r\n  styleUrls: ['./add-ledger.component.scss']\r\n})\r\nexport class AddLedgerComponent implements OnInit {\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  newLedgerName: string = '';\r\n  parentLedgerNumber: string = '';\r\n  ledgerNameArr: any[] = [];\r\n  parentGlNumber: string;\r\n  createLedgerFlag: boolean;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddLedgerComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private ledgerService: LedgerServiceService\r\n  ) {}\r\n  \r\n  ngOnInit(): void {\r\n    if(this.data.glNumber){\r\n      this.parentGlNumber = this.data.glNumber\r\n    }\r\n    if(this.data.createLedger){\r\n      this.createLedgerFlag = true\r\n    }\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  addNewInput(newLedgerName) {\r\n    const parentAccount = this.parentGlNumber; \r\n      if (newLedgerName.trim() !== '') {\r\n        this.ledgerNameArr.push({\r\n          glName: newLedgerName,\r\n          parentAccount: parentAccount\r\n        });\r\n      }\r\n    console.log(this.ledgerNameArr);\r\n  }\r\n\r\n  addLedger(): void {\r\n    let requestData = {}\r\n    if(this.createLedgerFlag){\r\n      requestData = {\r\n        data:[\r\n          {\r\n            glName: this.newLedgerName,\r\n            parentAccount: this.parentLedgerNumber,\r\n          }\r\n        ]\r\n      }\r\n      \r\n    } else {\r\n      requestData = {\r\n        data:[\r\n          {\r\n            glName: this.newLedgerName,\r\n            parentAccount: this.parentGlNumber,\r\n          }\r\n        ]\r\n      }\r\n      // data: this.ledgerNameArr,\r\n    }\r\n    console.log(requestData)\r\n    this.ledgerService.addCustomLedger(requestData, this.currentUser.id).then( res => {\r\n      if (res.success) {\r\n        console.log(res.message)\r\n      }\r\n    })\r\n    this.dialogRef.close({ glNumber: this.parentGlNumber, newLedgerName: this.newLedgerName });\r\n  }\r\n\r\n}\r\n","<!-- <h2 mat-dialog-title>Add Ledgers</h2>\r\n<div mat-dialog-content>\r\n    <h3>Add Ledger under <b>{{ data.glName }}</b></h3>\r\n    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n      <input matInput [(ngModel)]=\"newLedgerName\" placeholder=\"New Ledger\" />\r\n    </mat-form-field>\r\n    <button mat-button color=\"primary\" (click)=\"addNewInput(newLedgerName)\">Add New Input</button>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"cancel()\">Cancel</button>\r\n  <button mat-button color=\"primary\" (click)=\"addLedger()\">Add Ledgers</button>\r\n</div> -->\r\n\r\n<div class=\"container\">\r\n  <div class=\"\" *ngIf=\"!createLedgerFlag\">\r\n    <h2 mat-dialog-title>Add Ledgers</h2>\r\n    <h3>Add Ledger under <b>{{ data.glName }}</b></h3>\r\n    <div mat-dialog-content>\r\n        <ng-container *ngFor=\"let entry of ledgerNameArr; let i = index\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                <input matInput [(ngModel)]=\"entry.newLedgerNames[i]\" placeholder=\"New Ledger\" />\r\n            </mat-form-field>\r\n            <!-- <button mat-button color=\"primary\" (click)=\"addNewInput(entry)\">Add New Input</button> -->\r\n        </ng-container>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <input matInput [(ngModel)]=\"newLedgerName\" placeholder=\"New Ledger\" />\r\n          </mat-form-field>\r\n          <!-- <button mat-button color=\"primary\" (click)=\"addNewInput(newLedgerName)\">Add New Input</button> -->\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button class=\"btn-cancel\" (click)=\"cancel()\">Cancel</button>\r\n      <button class=\"btn-save ms-2\" (click)=\"addLedger()\">Add Ledgers</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"\" *ngIf=\"createLedgerFlag\">\r\n    <h2 mat-dialog-title>Add New Ledger</h2>\r\n    <div mat-dialog-content>\r\n      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n        <input matInput [(ngModel)]=\"parentLedgerNumber\" placeholder=\"Parent Ledger Number\" />\r\n      </mat-form-field>\r\n      \r\n      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n        <input matInput [(ngModel)]=\"newLedgerName\" placeholder=\"New Ledger\" />\r\n      </mat-form-field>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button class=\"btn-cancel\" (click)=\"cancel()\">Cancel</button>\r\n      <button class=\"btn-save ms-2\" (click)=\"addLedger()\">Add Ledgers</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { PreviewComponent } from '../preview/preview.component';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\nimport { ToastNotificationService } from 'src/app/core/services/toast-notification.service';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-my-ledger',\r\n  templateUrl: './my-ledger.component.html',\r\n  styleUrls: ['./my-ledger.component.scss']\r\n})\r\nexport class MyLedgerComponent implements OnInit {\r\n\r\n  isLoading: boolean = false;\r\n  searchTerm: string = '';\r\n\r\n  ledgerList: any[] = [  ];\r\n  selectedItems: any[] = []; // Array to store selected items\r\n  selectAllChecked: boolean = false; // Initialize with false\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n  categories: any[] = [];\r\n  sideTree: any[];\r\n  sideTreeData: any[] = [];\r\n  masterLedger: any[]= [];\r\n  \r\n  constructor(public dialog: MatDialog, private router: Router,\r\n    private ledgerService: LedgerServiceService, public toastService: ToastNotificationService,\r\n    private titleCasePipe: TitleCasePipe) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getUserLedger2().then(() => {\r\n      // console.log(this.sideTreeData)\r\n      this.ledgerService.setLedgerData(this.sideTreeData);\r\n    });\r\n  }\r\n\r\n  // recursive function to get all the childrens and their childrens dynamically\r\n  filterEntriesWithChildren(entries: any[]): any[] {\r\n    return entries.map(entry => {\r\n      this.categories.push(entry)   // adding all the entries one by one into the category array\r\n      const children = entry.children.length > 0 ? this.filterEntriesWithChildren(entry.children) : [];   //calling the same function n times and passing their children as a argument\r\n      return { entry, ...entry.children, children }; // getting the parent entry and children of that entry and grand children as well\r\n    })\r\n  }\r\n\r\n  allCategories(){\r\n    this.sideTreeData = this.categories\r\n  }\r\n  \r\n  async getUserLedger2(): Promise<void> {\r\n    this.isLoading = true;\r\n    try {\r\n      const res = await this.ledgerService.getUserLedger2({}, this.currentUser.id);\r\n      if (res.success) {\r\n        const rawData = res.data;\r\n        console.log(rawData);\r\n        // this.filterChildrenWithEmptyGrandchildren(rawData)\r\n        this.sideTreeData = this.categories;\r\n        // Filter out entries with no children recursively\r\n        const categories = this.filterEntriesWithChildren(rawData);\r\n        console.log(categories);\r\n        this.sideTree = categories;\r\n      }\r\n    } catch (err) {\r\n      if (err.error.status == 404) {\r\n        this.toastService.toastMsg({\r\n          title: \"Error\",\r\n          content: \"err.error.message\",\r\n          });\r\n        // this.toastService.openErrorSnackBar(err.error.message);\r\n      } else {\r\n        this.toastService.toastMsg({\r\n          title: \"Error\",\r\n          content: \"err.error.message\",\r\n          });\r\n        // this.toastService.openErrorSnackBar(err.error.message);\r\n      }\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n  \r\n  /// Recursive function to flatten the hierarchical structure\r\n  flattenCategory(category) {\r\n    const result: any[] = [];\r\n\r\n    // Add the current category\r\n    result.push(category);\r\n\r\n    // Recursively add children\r\n    if (category.children && category.children.length > 0) {\r\n      for (const child of category.children) {\r\n        const childData = this.flattenCategory(child);\r\n        result.push(...childData);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toggleNode(category): void {\r\n    this.isLoading = true;\r\n    setTimeout(() => { \r\n      const existingCategory = this.categories.find(c => c.glNumber === category.glNumber);\r\n      \r\n      // if (existingCategory) {\r\n      //   const filteredData = this.filterEntriesWithChildren(existingCategory.children);\r\n      //   // const filteredData = this.filterChildrenWithEmptyGrandchildren(existingCategory.children);\r\n      //   // this.buildSideTreeData(filteredData);\r\n      //   console.log(filteredData);\r\n      //   this.sideTreeData = filteredData;\r\n      // } else {\r\n      //   this.sideTreeData = this.categories;\r\n      // }\r\n      if (existingCategory) {\r\n        const flattenedData = this.flattenCategory(existingCategory);\r\n        console.log(flattenedData);\r\n        this.sideTreeData = flattenedData;\r\n      } else {\r\n        this.sideTreeData = this.categories;\r\n      }\r\n  \r\n      // Update selectedItems and selectAllChecked based on existing selections\r\n      this.updateSelectedItemsAndSelectAll();\r\n  \r\n      this.isLoading = false;\r\n    }, 1000);\r\n  }\r\n\r\n  filterChildrenWithEmptyGrandchildren(children): any[] {\r\n    const filteredChildren = children.filter(child => {\r\n      return child.children.length === 0 || this.hasEmptyGrandchildren(child.children);\r\n    });\r\n  \r\n    const nextLevelChildren = [];\r\n    for (const child of filteredChildren) {\r\n      nextLevelChildren.push(...child.children);\r\n    }\r\n  \r\n    if (nextLevelChildren.length > 0) {\r\n      return this.filterChildrenWithEmptyGrandchildren(nextLevelChildren);\r\n    }\r\n  \r\n    return filteredChildren;\r\n  }\r\n  \r\n  hasEmptyGrandchildren(children): boolean {\r\n    return children.some(grandchild => grandchild.children.length === 0);\r\n  }\r\n\r\n  // Add this function to update selectedItems and selectAllChecked\r\n  updateSelectedItemsAndSelectAll(): void {\r\n    const allSelected = this.sideTreeData.every(item => item.selected);\r\n    const someSelected = this.sideTreeData.some(item => item.selected);\r\n  \r\n    if (allSelected) {\r\n      this.selectAllChecked = true;\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else if (someSelected) {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = this.sideTreeData.filter(item => item.selected);\r\n    } else {\r\n      this.selectAllChecked = false;\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  displayCategory(category): void {\r\n    if (category.children.length === 0) {\r\n      console.log(category.glNumber, category.glName); // Display only if no children\r\n    } else {\r\n      console.log(category.glNumber, category.glName); // Display parent\r\n      for (const child of category.children) {\r\n        this.displayCategory(child); // Recursively display children\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange(item: any): void {\r\n    if (item.selected) {\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      const index = this.selectedItems.indexOf(item);\r\n      if (index !== -1) {\r\n        this.selectedItems.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    this.updateSelectAllCheckedState();\r\n    // Call updateSelectedItemsAndSelectAll to sync with selectAllChecked\r\n    this.updateSelectedItemsAndSelectAll();\r\n  }\r\n\r\n  toggleSelectAll(): void {\r\n    // this.selectAllChecked = !this.selectAllChecked;\r\n    for (const item of this.sideTreeData) {\r\n      item.selected = this.selectAllChecked;\r\n    }\r\n\r\n    // Update the selected items list as well\r\n    if (this.selectAllChecked) {\r\n      this.selectedItems = [...this.sideTreeData];\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  updateSelectAllCheckedState(): void {\r\n    this.selectAllChecked = this.sideTreeData.length > 0 && this.sideTreeData.every(item => item.selected);\r\n  }\r\n\r\n  openPreviewDialog(): void {\r\n    if(this.selectedItems && this.selectedItems.length > 0){\r\n      const dialogRef: MatDialogRef<PreviewComponent> = this.dialog.open(PreviewComponent, {\r\n        width: '800px', // Adjust the width as per your requirement\r\n        height : '100vh',\r\n        data: { \r\n          selectedItems: this.selectedItems,\r\n          allGlData : this.categories \r\n        }, // Pass the selected items to the modal\r\n        panelClass: 'custom-dialog-class',\r\n        disableClose:true,\r\n        position: {\r\n          right: '0',\r\n        },\r\n      });\r\n      \r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(`Dialog result: ${result}`);\r\n      });\r\n    } else {\r\n      this.toastService.toastMsg({\r\n        title: \"Error\",\r\n        content: \"There Is Not Selected Any Ledger. Please Select A Ledger.\",\r\n        });\r\n      // this.toastService.openErrorSnackBar(\"There is not selected any ledger. Please select a ledger.\")\r\n    }\r\n  }\r\n\r\n  filterData(): void {\r\n    const searchTerm = this.searchTerm.toLowerCase().trim();\r\n  \r\n    if (searchTerm === '') {\r\n      // If the search term is empty, show all data\r\n      this.sideTreeData = this.categories;\r\n    } else {\r\n      // Filter data based on the search term\r\n      this.sideTreeData = this.categories.filter(item => {\r\n        // Modify the condition as needed for your search criteria\r\n        return item.glNumber.toLowerCase().includes(searchTerm) || item.glName.toLowerCase().includes(searchTerm);\r\n      });\r\n    }\r\n  }\r\n  \r\n  openCutomizeLedger(){\r\n    // this.ledgerService.sharedArray = this.categories; // Set the array in the service\r\n    this.router.navigate(['pages/ledger-page/customize-ledger']);\r\n  }\r\n}\r\n","<div *ngIf=\"isLoading\" class=\"loader-container\">\r\n    <div class=\"loader\">\r\n      <div class=\"spinner-border\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div id=\"navPanel\" class=\"row\">\r\n      <div class=\"navOptions col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-6 ps-0\" style=\"margin-top: 4.25%; border-top: 1px solid #ccc;\">\r\n            <ul class=\"tree\">\r\n              <li>\r\n                <input type=\"checkbox\" id=\"c1\" (click)=\"allCategories()\"/>\r\n                <label class=\"tree_label\" for=\"c1\">Category</label>\r\n                <ul class=\"tree\">\r\n                  <li *ngFor=\"let rootCategory of sideTree\">\r\n                    <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: rootCategory.entry }\"></ng-container>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n\r\n            <ng-template #displayCategoryTemplate let-category=\"category\">\r\n              <li>\r\n                <input type=\"checkbox\" id=\"{{ category.glNumber }}\" (click)=\"toggleNode(category)\" />\r\n                <label class=\"tree_label\" for=\"{{ category.glNumber }}\">{{ category.glName }}</label>\r\n                <ul class=\"tree\">\r\n                  <li *ngFor=\"let childCategory of category.children\">\r\n                    <div *ngIf=\"childCategory.children.length > 0\">\r\n                      <ng-container *ngTemplateOutlet=\"displayCategoryTemplate; context: { category: childCategory }\"></ng-container>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n            </ng-template>\r\n      </div>\r\n\r\n      <div class=\"col-xxl-10 col-xl-10 col-lg-9 col-md-8 col-sm-6 ps-0\">\r\n          <div class=\"row d-flex flex-center mb-3\">\r\n              <div class=\"col-md-1 col-lg-5 col-xl-6\"></div>\r\n              <div class=\"col-sm-4 col-md-3 col-lg-3 col-xl-3 mt-2\">\r\n                <input type=\"search\" id=\"searchInput\" class=\"form-control pe-5\" placeholder=\"Search By\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"filterData()\" />\r\n              </div>\r\n              <div class=\"navOption-btns col-sm-8 col-md-8 col-lg-4 col-xl-3 mt-2\"\r\n                  style=\"display:flex;justify-content: space-around !important;align-items: center;\">\r\n                  <button class=\"btn text-nowrap\" type=\"button\" (click)=\"openCutomizeLedger()\"><i class=\"fas fa-plus me-2\"> </i>Customize Your Ledger\r\n                  </button>\r\n                  <!-- <button class=\"btn text-nowrap px-3\" type=\"button\" (click)=\"openPreviewDialog()\">\r\n                      Preview\r\n                  </button> -->\r\n              </div>\r\n          </div>\r\n\r\n          <!-- <hr class=\"my-0 py-0\" /> -->\r\n          <div style=\"border-left: 2px solid #ccc; overflow-x: auto;\">\r\n            <table class=\"table table-responsive mb-0\">\r\n                <thead class=\"text-600\">\r\n                  <tr>\r\n                    <!-- <th class=\"text-nowrap col-1\" style=\"vertical-align: middle;\">\r\n                      <input type=\"checkbox\" class=\"form-check-input mt-2\" [(ngModel)]=\"selectAllChecked\" (change)=\"toggleSelectAll()\" />\r\n                    </th> -->\r\n                    <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Code</th>\r\n                    <th class=\"text-nowrap\" style=\"vertical-align: middle;\">Ledger</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr class=\"btn-reveal-trigger text-left\" style=\"color: #676398!important;\" [ngStyle]=\"{'background-color': (i % 2 === 0 ? '#ffffff' : '#f2f2f2')}\" *ngFor=\"let child of sideTreeData; let i = index\">\r\n                    <!-- <td scope=\"row\" style=\"vertical-align: middle;\">\r\n                      <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"child.selected\" id=\"{{ child.glNumber }}\" (change)=\"handleCheckboxChange(child)\" />\r\n                    </td> -->\r\n                    <td style=\"vertical-align:middle;\">{{ child.glNumber }}</td>\r\n                    <td style=\"vertical-align:middle;\" for=\"child.glNumber\">{{ child.glName }}</td>\r\n\r\n                  </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n      </div>\r\n  </div>\r\n"],"names":[],"sourceRoot":"webpack:///"}