{"version":3,"mappings":"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","names":["LedgerServiceService","httpClient","rxjs__WEBPACK_IMPORTED_MODULE_2__","ledgerDataSubject","asObservable","data","console","log","next","userId","Promise","resolve","reject","inventory","src_app_helpers_url_constants__WEBPACK_IMPORTED_MODULE_0__","subscribe","res","err","_angular_core__WEBPACK_IMPORTED_MODULE_3__","factory","providedIn","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_r7","PreviewComponent","dialogRef","dialog","router","ledgerService","commonService","JSON","parse","localStorage","getItem","ledgerList","selectedItems","allGlData","ledgerItems","groupLedgerItems","keysArray","Object","keys","keysString","join","filter","includes","item","glNumber","filteredData","rowAdded$","groupedItems","forEach","parentAccount","push","matchedItem","find","glName","editing","editedName","glNumbersAndNames","reduce","acc","ledgerGlNumbersAndNames","values","group","requestBody","addLedger","currentUser","id","then","success","window","location","reload","close","ledgerToDelete","glNumberToDelete","updatedLedgerArray","entry","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__","selectors","decls","vars","consts","template","ctx"],"sources":["webpack:///src/app/core/services/ledger-service.service.ts","webpack:///src/app/pages/ledger/preview/preview.component.html","webpack:///src/app/pages/ledger/preview/preview.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { UrlConstants } from 'src/app/_helpers/url-constants';\r\nimport { HttpService } from './http.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LedgerServiceService {\r\n\r\n  // public sharedArray: any[] = [];\r\n  private ledgerDataSubject = new BehaviorSubject<any[]>([]);\r\n  MasterLedgerData$ = this.ledgerDataSubject.asObservable();\r\n  // allLedgerData$ = this.ledgerDataSubject.asObservable();\r\n\r\n  constructor(public httpClient:HttpService) { }\r\n\r\n  setLedgerData(data: any[]): void {\r\n    console.log(\"setLedger in service\", data);\r\n    this.ledgerDataSubject.next(data);\r\n  }\r\n\r\n  addLedger(data, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.addLedger + userId ,  'POST').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  getUserLedger2(data, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.getUserLedger2 + userId ,  'GET').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  getAllGlnames(data: {}, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.getAllGlnames + userId ,  'GET').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n  \r\n  getUserUsecaseData(data: {}, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.getUserUsecaseData + userId ,  'GET').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  addCustomLedger(data: {}, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.addCustomLedger + userId ,  'POST').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  assignLedgersv2(data: {}, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.assignLedgersv2 + userId ,  'POST').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  getUserChildLedger(data: {}, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.getUserChildLedger + userId ,  'GET').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n\r\n  masterLedgerTrueFalse(data: {}, userId): any {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.inventory(data, UrlConstants.masterLedgerTrueFalse + userId ,  'GET').subscribe(\r\n        (res) => resolve(res),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  }\r\n}\r\n","<div class=\"modal-header pt-0\" id=\"Add-Party-modal\">\r\n    <button style=\"margin-right: 10px !important;\" type=\"button\" class=\"btn btn-cancel my-1\"\r\n    (click)=\"cancel()\">Cancel</button>\r\n    <button type=\"button\" class=\"btn btn-save my-1\" (click)=\"saveData()\">Save</button>\r\n</div>\r\n\r\n<div class=\"modal-body\" style=\"overflow-y: auto; height: 92%;\">\r\n    <div class=\"mb-3\">\r\n        <div class=\"\">\r\n              <div class=\"table-responsive\" *ngFor=\"let groupKey of ledgerItems | keyvalue\">\r\n                <table class=\"table table-striped table-bordered bg-white\" *ngIf=\"groupKey.key.length > 0\">\r\n                  <thead style=\"background-color: #EBEBEB;\">\r\n                    <tr class=\"btn-reveal-trigger\">\r\n                      <th class=\"text-nowrap\" style = \"vertical-align: middle;\">{{ getGlNameByGlNumber(groupKey.key) }}</th>\r\n                      <th class=\"text-nowrap\"></th>\r\n                      <th class=\"text-nowrap\"></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr *ngFor=\"let item of groupKey.value; let i = index\">\r\n                      <!-- Render the columns based on your item properties -->\r\n                      <td style = \"vertical-align: middle;white-space: nowrap;\">{{ item.glNumber }}</td>\r\n                      <td style = \"vertical-align: middle;white-space: nowrap;\">\r\n                        <!-- Your editing and view mode logic here -->\r\n                        <ng-container *ngIf=\"item.editing; else viewMode\">\r\n                            <input type=\"text\" [(ngModel)]=\"item.editedName\" (keyup.enter)=\"saveEditedName(item)\" />\r\n                          </ng-container>\r\n                          <ng-template #viewMode>\r\n                            {{ item.glName }}\r\n                          </ng-template>\r\n                      </td>\r\n                      <td style=\"display: flex; justify-content: center;\">\r\n                        <!-- Your buttons and actions here -->\r\n                        <button class=\"btn btnp pt-0\" (click)=\"toggleEdit(item)\">\r\n                            <span class=\"bi-pencil-square fs-1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Edit\"></span>\r\n                        </button>\r\n                        <button class=\"btn btnp pt-0\" style=\"color : red\" data-bs-toggle=\"modal\" (click)=\"deleteItem(item)\">\r\n                            <span class=\"bi-trash fs-1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Delete\"></span>\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { request } from 'http';\r\nimport { CommonService } from 'src/app/core/services/common.service';\r\nimport { LedgerServiceService } from 'src/app/core/services/ledger-service.service';\r\n\r\n@Component({\r\n  selector: 'app-preview',\r\n  templateUrl: './preview.component.html',\r\n  styleUrls: ['./preview.component.scss']\r\n})\r\nexport class PreviewComponent implements OnInit {  \r\n  ledgerList: any[] = [];\r\n  public currentUser = JSON.parse(localStorage.getItem(\"currentUser\"))\r\n\r\n  // Create separate arrays for each category\r\n  currentAssets: any[] = [];\r\n  nonCurrentAssets: any[] = [];\r\n  currentLiabilities: any[] = [];\r\n  nonCurrentLiabilities: any[] = [];\r\n  equity: any[] = [];\r\n  revenue: any[] = [];\r\n  cogs: any[] = [];\r\n  operatingExpenses: any[] = [];\r\n  masterLedger: any[] = [];\r\n  ledgerItems: { [key: string]: [] } = {};\r\n  allGlData: any[] = [];\r\n  filteredData: any[];\r\n  itemToDelete: any;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any,\r\n  public dialogRef: MatDialogRef<PreviewComponent>, private dialog: MatDialog, public router: Router,\r\n  private ledgerService : LedgerServiceService, private commonService : CommonService) { \r\n    this.ledgerList = data.selectedItems; \r\n    this.allGlData = data.allGlData;\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.ledgerItems = this.groupLedgerItems(this.ledgerList);\r\n    const keysArray = Object.keys(this.ledgerItems);\r\n    const keysString = keysArray.join(', '); \r\n    console.log(this.allGlData.filter(item => keysString.includes(item.glNumber)));\r\n    this.filteredData = this.allGlData.filter(item => keysString.includes(item.glNumber));\r\n    console.log(this.filteredData);\r\n\r\n    this.commonService.rowAdded$.subscribe(() => {\r\n      this.ledgerItems = this.groupLedgerItems(this.ledgerList);\r\n      const keysArray = Object.keys(this.ledgerItems);\r\n      const keysString = keysArray.join(', '); \r\n      console.log(this.allGlData.filter(item => keysString.includes(item.glNumber)));\r\n      this.filteredData = this.allGlData.filter(item => keysString.includes(item.glNumber));\r\n    });\r\n\r\n  }\r\n\r\n  groupLedgerItems(ledgerItems: any[]) {\r\n    const groupedItems = {};\r\n    console.log(ledgerItems)\r\n    ledgerItems.forEach(item => {\r\n      if (!groupedItems[item.parentAccount]) {\r\n        groupedItems[item.parentAccount] = [];\r\n      }\r\n      groupedItems[item.parentAccount].push(item);\r\n    });\r\n  \r\n    return groupedItems;\r\n  }\r\n  \r\n  getGlNameByGlNumber(glNumber: string): string {\r\n    const matchedItem = this.filteredData.find(item => item.glNumber === glNumber);\r\n    return matchedItem ? matchedItem.glName : ''; // Return the glName or an empty string if not found\r\n  }\r\n\r\n  toggleEdit(item: any): void {\r\n    if (!item.editing) {\r\n      item.editing = true;\r\n      item.editedName = item.glName;\r\n    } else {\r\n      item.editing = false;\r\n    }\r\n  }\r\n\r\n  saveEditedName(item: any): void {\r\n    if (item.editing) {\r\n      item.glName = item.editedName;\r\n      item.editing = false;\r\n    }\r\n  }\r\n\r\n  saveData(): void {\r\n    const glNumbersAndNames = this.filteredData.reduce((acc, item) => {\r\n      acc[item.glNumber] = item.glName;\r\n      return acc;\r\n    }, {});\r\n    \r\n    console.log(this.ledgerItems)\r\n    const ledgerGlNumbersAndNames: Record<string, string> = {};\r\n    Object.values(this.ledgerItems).forEach((group: any[]) => {\r\n      group.forEach(item => {\r\n        ledgerGlNumbersAndNames[item.glNumber] = item.glName;\r\n      });\r\n    });\r\n\r\n    console.log(glNumbersAndNames)\r\n    console.log(ledgerGlNumbersAndNames)\r\n    // Create the requestBody object\r\n    const requestBody = {\r\n      new: {\r\n        ...glNumbersAndNames,\r\n        ...ledgerGlNumbersAndNames\r\n      }\r\n    };    \r\n    \r\n    this.ledgerService.addLedger(requestBody, this.currentUser.id).then((res) => {\r\n      if(res.success) {\r\n        console.log(res);\r\n        window.location.reload();   // reload the page after ledger has been added to master ledger for redirecting user to master ledger page\r\n        this.dialogRef.close();\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteItem(ledgerToDelete) {  \r\n    // Get the glNumber to delete from the ledger object\r\n    const glNumberToDelete = ledgerToDelete.glNumber;\r\n    const parentAccount = ledgerToDelete.parentAccount;\r\n  \r\n    const updatedLedgerArray = this.ledgerItems[parentAccount].filter(\r\n      (entry: any) => entry.glNumber !== glNumberToDelete\r\n    ) as []; // Explicitly assert the type\r\n\r\n      console.log(updatedLedgerArray)\r\n    // Update the ledgerItems object with the modified array\r\n    this.ledgerItems[parentAccount] = updatedLedgerArray;\r\n  \r\n    // Get an array of ledger entry arrays from the ledgerList object\r\n    // const ledgerArrays = Object.values(this.ledgerList);\r\n\r\n    // // Iterate through each array of ledger entries\r\n    // const indexToDelete = ledgerArrays.findIndex(\r\n    //   (entry: any) => entry.glNumber === glNumberToDelete\r\n    // );\r\n\r\n    // // Delete the ledger entry if found\r\n    // if (indexToDelete !== -1) {\r\n    //   ledgerArrays.splice(indexToDelete, 1);\r\n    // }\r\n\r\n    // // Reconstruct the ledgerList object from the modified ledgerArrays\r\n    // const updatedLedgerList: any = {}; // Using type assertion\r\n\r\n    // Object.keys(this.ledgerList).forEach((key, index) => {\r\n    //   updatedLedgerList[key] = ledgerArrays[index];\r\n    // });\r\n  \r\n    // console.log(this.ledgerItems);\r\n    // this.ledgerItems[parentAccount] = updatedLedgerList \r\n    // console.log(Object.values(this.ledgerItems));\r\n    // this.commonService.notifyDataAdded()\r\n  }\r\n  \r\n  cancel() {\r\n    // Reset the form and submitted flag\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n"]}